
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015d8  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004015d8  004015d8  000115d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000048c  20400000  004015e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000b0  2040048c  00401a6c  0002048c  2**2
                  ALLOC
  4 .stack        00002004  2040053c  00401b1c  0002048c  2**0
                  ALLOC
  5 .heap         00000200  20402540  00403b20  0002048c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002048c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b03d  00000000  00000000  00020513  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000187c  00000000  00000000  0002b550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002430  00000000  00000000  0002cdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000568  00000000  00000000  0002f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000610  00000000  00000000  0002f764  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c281  00000000  00000000  0002fd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000068ad  00000000  00000000  0004bff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008944c  00000000  00000000  000528a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000e98  00000000  00000000  000dbcf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 25 40 20 81 04 40 00 7d 04 40 00 7d 04 40 00     @%@ ..@.}.@.}.@.
  400010:	7d 04 40 00 7d 04 40 00 7d 04 40 00 00 00 00 00     }.@.}.@.}.@.....
	...
  40002c:	7d 04 40 00 7d 04 40 00 00 00 00 00 7d 04 40 00     }.@.}.@.....}.@.
  40003c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40004c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40005c:	7d 04 40 00 7d 04 40 00 00 00 00 00 a5 02 40 00     }.@.}.@.......@.
  40006c:	b9 02 40 00 cd 02 40 00 7d 04 40 00 7d 04 40 00     ..@...@.}.@.}.@.
  40007c:	7d 04 40 00 e1 02 40 00 f5 02 40 00 7d 04 40 00     }.@...@...@.}.@.
  40008c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40009c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  4000ac:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  4000bc:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  4000cc:	7d 04 40 00 00 00 00 00 7d 04 40 00 00 00 00 00     }.@.....}.@.....
  4000dc:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  4000ec:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  4000fc:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40010c:	7d 04 40 00 7d 04 40 00 00 00 00 00 00 00 00 00     }.@.}.@.........
  40011c:	00 00 00 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     ....}.@.}.@.}.@.
  40012c:	7d 04 40 00 7d 04 40 00 00 00 00 00 7d 04 40 00     }.@.}.@.....}.@.
  40013c:	7d 04 40 00                                         }.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040048c 	.word	0x2040048c
  40015c:	00000000 	.word	0x00000000
  400160:	004015e0 	.word	0x004015e0

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004015e0 	.word	0x004015e0
  4001a0:	20400490 	.word	0x20400490
  4001a4:	004015e0 	.word	0x004015e0
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400655 	.word	0x00400655
  4001f8:	004003a5 	.word	0x004003a5
  4001fc:	004003f9 	.word	0x004003f9
  400200:	00400409 	.word	0x00400409
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400419 	.word	0x00400419
  400210:	00400309 	.word	0x00400309
  400214:	00400341 	.word	0x00400341
  400218:	00400549 	.word	0x00400549

0040021c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40021c:	6301      	str	r1, [r0, #48]	; 0x30
  40021e:	4770      	bx	lr

00400220 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400220:	6341      	str	r1, [r0, #52]	; 0x34
  400222:	4770      	bx	lr

00400224 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400224:	b410      	push	{r4}
  400226:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400228:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40022a:	b94c      	cbnz	r4, 400240 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40022c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40022e:	b14b      	cbz	r3, 400244 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400230:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400232:	b94a      	cbnz	r2, 400248 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400234:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400236:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400238:	6001      	str	r1, [r0, #0]
}
  40023a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40023e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400240:	6641      	str	r1, [r0, #100]	; 0x64
  400242:	e7f4      	b.n	40022e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400244:	6541      	str	r1, [r0, #84]	; 0x54
  400246:	e7f4      	b.n	400232 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400248:	6301      	str	r1, [r0, #48]	; 0x30
  40024a:	e7f4      	b.n	400236 <pio_set_output+0x12>

0040024c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40024c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40024e:	4770      	bx	lr

00400250 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400250:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400252:	4770      	bx	lr

00400254 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400258:	4604      	mov	r4, r0
  40025a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40025c:	4b0e      	ldr	r3, [pc, #56]	; (400298 <pio_handler_process+0x44>)
  40025e:	4798      	blx	r3
  400260:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400262:	4620      	mov	r0, r4
  400264:	4b0d      	ldr	r3, [pc, #52]	; (40029c <pio_handler_process+0x48>)
  400266:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400268:	4005      	ands	r5, r0
  40026a:	d013      	beq.n	400294 <pio_handler_process+0x40>
  40026c:	4c0c      	ldr	r4, [pc, #48]	; (4002a0 <pio_handler_process+0x4c>)
  40026e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400272:	e003      	b.n	40027c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400274:	42b4      	cmp	r4, r6
  400276:	d00d      	beq.n	400294 <pio_handler_process+0x40>
  400278:	3410      	adds	r4, #16
		while (status != 0) {
  40027a:	b15d      	cbz	r5, 400294 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40027c:	6820      	ldr	r0, [r4, #0]
  40027e:	4540      	cmp	r0, r8
  400280:	d1f8      	bne.n	400274 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400282:	6861      	ldr	r1, [r4, #4]
  400284:	4229      	tst	r1, r5
  400286:	d0f5      	beq.n	400274 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400288:	68e3      	ldr	r3, [r4, #12]
  40028a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40028c:	6863      	ldr	r3, [r4, #4]
  40028e:	ea25 0503 	bic.w	r5, r5, r3
  400292:	e7ef      	b.n	400274 <pio_handler_process+0x20>
  400294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400298:	0040024d 	.word	0x0040024d
  40029c:	00400251 	.word	0x00400251
  4002a0:	204004a8 	.word	0x204004a8

004002a4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4002a6:	210a      	movs	r1, #10
  4002a8:	4801      	ldr	r0, [pc, #4]	; (4002b0 <PIOA_Handler+0xc>)
  4002aa:	4b02      	ldr	r3, [pc, #8]	; (4002b4 <PIOA_Handler+0x10>)
  4002ac:	4798      	blx	r3
  4002ae:	bd08      	pop	{r3, pc}
  4002b0:	400e0e00 	.word	0x400e0e00
  4002b4:	00400255 	.word	0x00400255

004002b8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002b8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4002ba:	210b      	movs	r1, #11
  4002bc:	4801      	ldr	r0, [pc, #4]	; (4002c4 <PIOB_Handler+0xc>)
  4002be:	4b02      	ldr	r3, [pc, #8]	; (4002c8 <PIOB_Handler+0x10>)
  4002c0:	4798      	blx	r3
  4002c2:	bd08      	pop	{r3, pc}
  4002c4:	400e1000 	.word	0x400e1000
  4002c8:	00400255 	.word	0x00400255

004002cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4002cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4002ce:	210c      	movs	r1, #12
  4002d0:	4801      	ldr	r0, [pc, #4]	; (4002d8 <PIOC_Handler+0xc>)
  4002d2:	4b02      	ldr	r3, [pc, #8]	; (4002dc <PIOC_Handler+0x10>)
  4002d4:	4798      	blx	r3
  4002d6:	bd08      	pop	{r3, pc}
  4002d8:	400e1200 	.word	0x400e1200
  4002dc:	00400255 	.word	0x00400255

004002e0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4002e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4002e2:	2110      	movs	r1, #16
  4002e4:	4801      	ldr	r0, [pc, #4]	; (4002ec <PIOD_Handler+0xc>)
  4002e6:	4b02      	ldr	r3, [pc, #8]	; (4002f0 <PIOD_Handler+0x10>)
  4002e8:	4798      	blx	r3
  4002ea:	bd08      	pop	{r3, pc}
  4002ec:	400e1400 	.word	0x400e1400
  4002f0:	00400255 	.word	0x00400255

004002f4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4002f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4002f6:	2111      	movs	r1, #17
  4002f8:	4801      	ldr	r0, [pc, #4]	; (400300 <PIOE_Handler+0xc>)
  4002fa:	4b02      	ldr	r3, [pc, #8]	; (400304 <PIOE_Handler+0x10>)
  4002fc:	4798      	blx	r3
  4002fe:	bd08      	pop	{r3, pc}
  400300:	400e1600 	.word	0x400e1600
  400304:	00400255 	.word	0x00400255

00400308 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400308:	2803      	cmp	r0, #3
  40030a:	d011      	beq.n	400330 <pmc_mck_set_division+0x28>
  40030c:	2804      	cmp	r0, #4
  40030e:	d012      	beq.n	400336 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400310:	2802      	cmp	r0, #2
  400312:	bf0c      	ite	eq
  400314:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400318:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40031a:	4a08      	ldr	r2, [pc, #32]	; (40033c <pmc_mck_set_division+0x34>)
  40031c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40031e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400322:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400324:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400326:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400328:	f013 0f08 	tst.w	r3, #8
  40032c:	d0fb      	beq.n	400326 <pmc_mck_set_division+0x1e>
}
  40032e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400330:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400334:	e7f1      	b.n	40031a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400336:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40033a:	e7ee      	b.n	40031a <pmc_mck_set_division+0x12>
  40033c:	400e0600 	.word	0x400e0600

00400340 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400340:	4a17      	ldr	r2, [pc, #92]	; (4003a0 <pmc_switch_mck_to_pllack+0x60>)
  400342:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400348:	4318      	orrs	r0, r3
  40034a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40034c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40034e:	f013 0f08 	tst.w	r3, #8
  400352:	d10a      	bne.n	40036a <pmc_switch_mck_to_pllack+0x2a>
  400354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400358:	4911      	ldr	r1, [pc, #68]	; (4003a0 <pmc_switch_mck_to_pllack+0x60>)
  40035a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40035c:	f012 0f08 	tst.w	r2, #8
  400360:	d103      	bne.n	40036a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400362:	3b01      	subs	r3, #1
  400364:	d1f9      	bne.n	40035a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400366:	2001      	movs	r0, #1
  400368:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40036a:	4a0d      	ldr	r2, [pc, #52]	; (4003a0 <pmc_switch_mck_to_pllack+0x60>)
  40036c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40036e:	f023 0303 	bic.w	r3, r3, #3
  400372:	f043 0302 	orr.w	r3, r3, #2
  400376:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400378:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40037a:	f013 0f08 	tst.w	r3, #8
  40037e:	d10a      	bne.n	400396 <pmc_switch_mck_to_pllack+0x56>
  400380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400384:	4906      	ldr	r1, [pc, #24]	; (4003a0 <pmc_switch_mck_to_pllack+0x60>)
  400386:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400388:	f012 0f08 	tst.w	r2, #8
  40038c:	d105      	bne.n	40039a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40038e:	3b01      	subs	r3, #1
  400390:	d1f9      	bne.n	400386 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400392:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400394:	4770      	bx	lr
	return 0;
  400396:	2000      	movs	r0, #0
  400398:	4770      	bx	lr
  40039a:	2000      	movs	r0, #0
  40039c:	4770      	bx	lr
  40039e:	bf00      	nop
  4003a0:	400e0600 	.word	0x400e0600

004003a4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4003a4:	b9a0      	cbnz	r0, 4003d0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4003a6:	480e      	ldr	r0, [pc, #56]	; (4003e0 <pmc_switch_mainck_to_xtal+0x3c>)
  4003a8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4003aa:	0209      	lsls	r1, r1, #8
  4003ac:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4003ae:	4a0d      	ldr	r2, [pc, #52]	; (4003e4 <pmc_switch_mainck_to_xtal+0x40>)
  4003b0:	401a      	ands	r2, r3
  4003b2:	4b0d      	ldr	r3, [pc, #52]	; (4003e8 <pmc_switch_mainck_to_xtal+0x44>)
  4003b4:	4313      	orrs	r3, r2
  4003b6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4003b8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4003ba:	4602      	mov	r2, r0
  4003bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003be:	f013 0f01 	tst.w	r3, #1
  4003c2:	d0fb      	beq.n	4003bc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4003c4:	4a06      	ldr	r2, [pc, #24]	; (4003e0 <pmc_switch_mainck_to_xtal+0x3c>)
  4003c6:	6a11      	ldr	r1, [r2, #32]
  4003c8:	4b08      	ldr	r3, [pc, #32]	; (4003ec <pmc_switch_mainck_to_xtal+0x48>)
  4003ca:	430b      	orrs	r3, r1
  4003cc:	6213      	str	r3, [r2, #32]
  4003ce:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4003d0:	4903      	ldr	r1, [pc, #12]	; (4003e0 <pmc_switch_mainck_to_xtal+0x3c>)
  4003d2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4003d4:	4a06      	ldr	r2, [pc, #24]	; (4003f0 <pmc_switch_mainck_to_xtal+0x4c>)
  4003d6:	401a      	ands	r2, r3
  4003d8:	4b06      	ldr	r3, [pc, #24]	; (4003f4 <pmc_switch_mainck_to_xtal+0x50>)
  4003da:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4003dc:	620b      	str	r3, [r1, #32]
  4003de:	4770      	bx	lr
  4003e0:	400e0600 	.word	0x400e0600
  4003e4:	ffc8fffc 	.word	0xffc8fffc
  4003e8:	00370001 	.word	0x00370001
  4003ec:	01370000 	.word	0x01370000
  4003f0:	fec8fffc 	.word	0xfec8fffc
  4003f4:	01370002 	.word	0x01370002

004003f8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4003f8:	4b02      	ldr	r3, [pc, #8]	; (400404 <pmc_osc_is_ready_mainck+0xc>)
  4003fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4003fc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400400:	4770      	bx	lr
  400402:	bf00      	nop
  400404:	400e0600 	.word	0x400e0600

00400408 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400408:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40040c:	4b01      	ldr	r3, [pc, #4]	; (400414 <pmc_disable_pllack+0xc>)
  40040e:	629a      	str	r2, [r3, #40]	; 0x28
  400410:	4770      	bx	lr
  400412:	bf00      	nop
  400414:	400e0600 	.word	0x400e0600

00400418 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400418:	4b02      	ldr	r3, [pc, #8]	; (400424 <pmc_is_locked_pllack+0xc>)
  40041a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40041c:	f000 0002 	and.w	r0, r0, #2
  400420:	4770      	bx	lr
  400422:	bf00      	nop
  400424:	400e0600 	.word	0x400e0600

00400428 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400428:	283f      	cmp	r0, #63	; 0x3f
  40042a:	d81e      	bhi.n	40046a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40042c:	281f      	cmp	r0, #31
  40042e:	d80c      	bhi.n	40044a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400430:	4b11      	ldr	r3, [pc, #68]	; (400478 <pmc_enable_periph_clk+0x50>)
  400432:	699a      	ldr	r2, [r3, #24]
  400434:	2301      	movs	r3, #1
  400436:	4083      	lsls	r3, r0
  400438:	4393      	bics	r3, r2
  40043a:	d018      	beq.n	40046e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40043c:	2301      	movs	r3, #1
  40043e:	fa03 f000 	lsl.w	r0, r3, r0
  400442:	4b0d      	ldr	r3, [pc, #52]	; (400478 <pmc_enable_periph_clk+0x50>)
  400444:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400446:	2000      	movs	r0, #0
  400448:	4770      	bx	lr
		ul_id -= 32;
  40044a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40044c:	4b0a      	ldr	r3, [pc, #40]	; (400478 <pmc_enable_periph_clk+0x50>)
  40044e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400452:	2301      	movs	r3, #1
  400454:	4083      	lsls	r3, r0
  400456:	4393      	bics	r3, r2
  400458:	d00b      	beq.n	400472 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40045a:	2301      	movs	r3, #1
  40045c:	fa03 f000 	lsl.w	r0, r3, r0
  400460:	4b05      	ldr	r3, [pc, #20]	; (400478 <pmc_enable_periph_clk+0x50>)
  400462:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400466:	2000      	movs	r0, #0
  400468:	4770      	bx	lr
		return 1;
  40046a:	2001      	movs	r0, #1
  40046c:	4770      	bx	lr
	return 0;
  40046e:	2000      	movs	r0, #0
  400470:	4770      	bx	lr
  400472:	2000      	movs	r0, #0
}
  400474:	4770      	bx	lr
  400476:	bf00      	nop
  400478:	400e0600 	.word	0x400e0600

0040047c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40047c:	e7fe      	b.n	40047c <Dummy_Handler>
	...

00400480 <Reset_Handler>:
{
  400480:	b500      	push	{lr}
  400482:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400484:	4b25      	ldr	r3, [pc, #148]	; (40051c <Reset_Handler+0x9c>)
  400486:	4a26      	ldr	r2, [pc, #152]	; (400520 <Reset_Handler+0xa0>)
  400488:	429a      	cmp	r2, r3
  40048a:	d010      	beq.n	4004ae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40048c:	4b25      	ldr	r3, [pc, #148]	; (400524 <Reset_Handler+0xa4>)
  40048e:	4a23      	ldr	r2, [pc, #140]	; (40051c <Reset_Handler+0x9c>)
  400490:	429a      	cmp	r2, r3
  400492:	d20c      	bcs.n	4004ae <Reset_Handler+0x2e>
  400494:	3b01      	subs	r3, #1
  400496:	1a9b      	subs	r3, r3, r2
  400498:	f023 0303 	bic.w	r3, r3, #3
  40049c:	3304      	adds	r3, #4
  40049e:	4413      	add	r3, r2
  4004a0:	491f      	ldr	r1, [pc, #124]	; (400520 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4004a2:	f851 0b04 	ldr.w	r0, [r1], #4
  4004a6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4004aa:	429a      	cmp	r2, r3
  4004ac:	d1f9      	bne.n	4004a2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4004ae:	4b1e      	ldr	r3, [pc, #120]	; (400528 <Reset_Handler+0xa8>)
  4004b0:	4a1e      	ldr	r2, [pc, #120]	; (40052c <Reset_Handler+0xac>)
  4004b2:	429a      	cmp	r2, r3
  4004b4:	d20a      	bcs.n	4004cc <Reset_Handler+0x4c>
  4004b6:	3b01      	subs	r3, #1
  4004b8:	1a9b      	subs	r3, r3, r2
  4004ba:	f023 0303 	bic.w	r3, r3, #3
  4004be:	3304      	adds	r3, #4
  4004c0:	4413      	add	r3, r2
                *pDest++ = 0;
  4004c2:	2100      	movs	r1, #0
  4004c4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4004c8:	4293      	cmp	r3, r2
  4004ca:	d1fb      	bne.n	4004c4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4004cc:	4a18      	ldr	r2, [pc, #96]	; (400530 <Reset_Handler+0xb0>)
  4004ce:	4b19      	ldr	r3, [pc, #100]	; (400534 <Reset_Handler+0xb4>)
  4004d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004d4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4004d6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4004da:	fab3 f383 	clz	r3, r3
  4004de:	095b      	lsrs	r3, r3, #5
  4004e0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4004e2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4004e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4004e8:	2200      	movs	r2, #0
  4004ea:	4b13      	ldr	r3, [pc, #76]	; (400538 <Reset_Handler+0xb8>)
  4004ec:	701a      	strb	r2, [r3, #0]
	return flags;
  4004ee:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4004f0:	4a12      	ldr	r2, [pc, #72]	; (40053c <Reset_Handler+0xbc>)
  4004f2:	6813      	ldr	r3, [r2, #0]
  4004f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4004f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4004fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004fe:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400502:	b129      	cbz	r1, 400510 <Reset_Handler+0x90>
		cpu_irq_enable();
  400504:	2201      	movs	r2, #1
  400506:	4b0c      	ldr	r3, [pc, #48]	; (400538 <Reset_Handler+0xb8>)
  400508:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40050a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40050e:	b662      	cpsie	i
        __libc_init_array();
  400510:	4b0b      	ldr	r3, [pc, #44]	; (400540 <Reset_Handler+0xc0>)
  400512:	4798      	blx	r3
        main();
  400514:	4b0b      	ldr	r3, [pc, #44]	; (400544 <Reset_Handler+0xc4>)
  400516:	4798      	blx	r3
  400518:	e7fe      	b.n	400518 <Reset_Handler+0x98>
  40051a:	bf00      	nop
  40051c:	20400000 	.word	0x20400000
  400520:	004015e0 	.word	0x004015e0
  400524:	2040048c 	.word	0x2040048c
  400528:	2040053c 	.word	0x2040053c
  40052c:	2040048c 	.word	0x2040048c
  400530:	e000ed00 	.word	0xe000ed00
  400534:	00400000 	.word	0x00400000
  400538:	2040000a 	.word	0x2040000a
  40053c:	e000ed88 	.word	0xe000ed88
  400540:	00401441 	.word	0x00401441
  400544:	00400809 	.word	0x00400809

00400548 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400548:	4b3b      	ldr	r3, [pc, #236]	; (400638 <SystemCoreClockUpdate+0xf0>)
  40054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40054c:	f003 0303 	and.w	r3, r3, #3
  400550:	2b01      	cmp	r3, #1
  400552:	d01d      	beq.n	400590 <SystemCoreClockUpdate+0x48>
  400554:	b183      	cbz	r3, 400578 <SystemCoreClockUpdate+0x30>
  400556:	2b02      	cmp	r3, #2
  400558:	d036      	beq.n	4005c8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40055a:	4b37      	ldr	r3, [pc, #220]	; (400638 <SystemCoreClockUpdate+0xf0>)
  40055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40055e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400562:	2b70      	cmp	r3, #112	; 0x70
  400564:	d05f      	beq.n	400626 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400566:	4b34      	ldr	r3, [pc, #208]	; (400638 <SystemCoreClockUpdate+0xf0>)
  400568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40056a:	4934      	ldr	r1, [pc, #208]	; (40063c <SystemCoreClockUpdate+0xf4>)
  40056c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400570:	680b      	ldr	r3, [r1, #0]
  400572:	40d3      	lsrs	r3, r2
  400574:	600b      	str	r3, [r1, #0]
  400576:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400578:	4b31      	ldr	r3, [pc, #196]	; (400640 <SystemCoreClockUpdate+0xf8>)
  40057a:	695b      	ldr	r3, [r3, #20]
  40057c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400580:	bf14      	ite	ne
  400582:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400586:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40058a:	4b2c      	ldr	r3, [pc, #176]	; (40063c <SystemCoreClockUpdate+0xf4>)
  40058c:	601a      	str	r2, [r3, #0]
  40058e:	e7e4      	b.n	40055a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400590:	4b29      	ldr	r3, [pc, #164]	; (400638 <SystemCoreClockUpdate+0xf0>)
  400592:	6a1b      	ldr	r3, [r3, #32]
  400594:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400598:	d003      	beq.n	4005a2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40059a:	4a2a      	ldr	r2, [pc, #168]	; (400644 <SystemCoreClockUpdate+0xfc>)
  40059c:	4b27      	ldr	r3, [pc, #156]	; (40063c <SystemCoreClockUpdate+0xf4>)
  40059e:	601a      	str	r2, [r3, #0]
  4005a0:	e7db      	b.n	40055a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4005a2:	4a29      	ldr	r2, [pc, #164]	; (400648 <SystemCoreClockUpdate+0x100>)
  4005a4:	4b25      	ldr	r3, [pc, #148]	; (40063c <SystemCoreClockUpdate+0xf4>)
  4005a6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4005a8:	4b23      	ldr	r3, [pc, #140]	; (400638 <SystemCoreClockUpdate+0xf0>)
  4005aa:	6a1b      	ldr	r3, [r3, #32]
  4005ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005b0:	2b10      	cmp	r3, #16
  4005b2:	d005      	beq.n	4005c0 <SystemCoreClockUpdate+0x78>
  4005b4:	2b20      	cmp	r3, #32
  4005b6:	d1d0      	bne.n	40055a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4005b8:	4a22      	ldr	r2, [pc, #136]	; (400644 <SystemCoreClockUpdate+0xfc>)
  4005ba:	4b20      	ldr	r3, [pc, #128]	; (40063c <SystemCoreClockUpdate+0xf4>)
  4005bc:	601a      	str	r2, [r3, #0]
          break;
  4005be:	e7cc      	b.n	40055a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4005c0:	4a22      	ldr	r2, [pc, #136]	; (40064c <SystemCoreClockUpdate+0x104>)
  4005c2:	4b1e      	ldr	r3, [pc, #120]	; (40063c <SystemCoreClockUpdate+0xf4>)
  4005c4:	601a      	str	r2, [r3, #0]
          break;
  4005c6:	e7c8      	b.n	40055a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4005c8:	4b1b      	ldr	r3, [pc, #108]	; (400638 <SystemCoreClockUpdate+0xf0>)
  4005ca:	6a1b      	ldr	r3, [r3, #32]
  4005cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4005d0:	d016      	beq.n	400600 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4005d2:	4a1c      	ldr	r2, [pc, #112]	; (400644 <SystemCoreClockUpdate+0xfc>)
  4005d4:	4b19      	ldr	r3, [pc, #100]	; (40063c <SystemCoreClockUpdate+0xf4>)
  4005d6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4005d8:	4b17      	ldr	r3, [pc, #92]	; (400638 <SystemCoreClockUpdate+0xf0>)
  4005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005dc:	f003 0303 	and.w	r3, r3, #3
  4005e0:	2b02      	cmp	r3, #2
  4005e2:	d1ba      	bne.n	40055a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4005e4:	4a14      	ldr	r2, [pc, #80]	; (400638 <SystemCoreClockUpdate+0xf0>)
  4005e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4005e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4005ea:	4814      	ldr	r0, [pc, #80]	; (40063c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4005ec:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4005f0:	6803      	ldr	r3, [r0, #0]
  4005f2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4005f6:	b2d2      	uxtb	r2, r2
  4005f8:	fbb3 f3f2 	udiv	r3, r3, r2
  4005fc:	6003      	str	r3, [r0, #0]
  4005fe:	e7ac      	b.n	40055a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400600:	4a11      	ldr	r2, [pc, #68]	; (400648 <SystemCoreClockUpdate+0x100>)
  400602:	4b0e      	ldr	r3, [pc, #56]	; (40063c <SystemCoreClockUpdate+0xf4>)
  400604:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400606:	4b0c      	ldr	r3, [pc, #48]	; (400638 <SystemCoreClockUpdate+0xf0>)
  400608:	6a1b      	ldr	r3, [r3, #32]
  40060a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40060e:	2b10      	cmp	r3, #16
  400610:	d005      	beq.n	40061e <SystemCoreClockUpdate+0xd6>
  400612:	2b20      	cmp	r3, #32
  400614:	d1e0      	bne.n	4005d8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400616:	4a0b      	ldr	r2, [pc, #44]	; (400644 <SystemCoreClockUpdate+0xfc>)
  400618:	4b08      	ldr	r3, [pc, #32]	; (40063c <SystemCoreClockUpdate+0xf4>)
  40061a:	601a      	str	r2, [r3, #0]
          break;
  40061c:	e7dc      	b.n	4005d8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40061e:	4a0b      	ldr	r2, [pc, #44]	; (40064c <SystemCoreClockUpdate+0x104>)
  400620:	4b06      	ldr	r3, [pc, #24]	; (40063c <SystemCoreClockUpdate+0xf4>)
  400622:	601a      	str	r2, [r3, #0]
          break;
  400624:	e7d8      	b.n	4005d8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400626:	4a05      	ldr	r2, [pc, #20]	; (40063c <SystemCoreClockUpdate+0xf4>)
  400628:	6813      	ldr	r3, [r2, #0]
  40062a:	4909      	ldr	r1, [pc, #36]	; (400650 <SystemCoreClockUpdate+0x108>)
  40062c:	fba1 1303 	umull	r1, r3, r1, r3
  400630:	085b      	lsrs	r3, r3, #1
  400632:	6013      	str	r3, [r2, #0]
  400634:	4770      	bx	lr
  400636:	bf00      	nop
  400638:	400e0600 	.word	0x400e0600
  40063c:	2040000c 	.word	0x2040000c
  400640:	400e1810 	.word	0x400e1810
  400644:	00b71b00 	.word	0x00b71b00
  400648:	003d0900 	.word	0x003d0900
  40064c:	007a1200 	.word	0x007a1200
  400650:	aaaaaaab 	.word	0xaaaaaaab

00400654 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400654:	4b12      	ldr	r3, [pc, #72]	; (4006a0 <system_init_flash+0x4c>)
  400656:	4298      	cmp	r0, r3
  400658:	d911      	bls.n	40067e <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40065a:	4b12      	ldr	r3, [pc, #72]	; (4006a4 <system_init_flash+0x50>)
  40065c:	4298      	cmp	r0, r3
  40065e:	d913      	bls.n	400688 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400660:	4b11      	ldr	r3, [pc, #68]	; (4006a8 <system_init_flash+0x54>)
  400662:	4298      	cmp	r0, r3
  400664:	d914      	bls.n	400690 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400666:	4b11      	ldr	r3, [pc, #68]	; (4006ac <system_init_flash+0x58>)
  400668:	4298      	cmp	r0, r3
  40066a:	d915      	bls.n	400698 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40066c:	4b10      	ldr	r3, [pc, #64]	; (4006b0 <system_init_flash+0x5c>)
  40066e:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400670:	bf94      	ite	ls
  400672:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400676:	4a0f      	ldrhi	r2, [pc, #60]	; (4006b4 <system_init_flash+0x60>)
  400678:	4b0f      	ldr	r3, [pc, #60]	; (4006b8 <system_init_flash+0x64>)
  40067a:	601a      	str	r2, [r3, #0]
  40067c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40067e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400682:	4b0d      	ldr	r3, [pc, #52]	; (4006b8 <system_init_flash+0x64>)
  400684:	601a      	str	r2, [r3, #0]
  400686:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400688:	4a0c      	ldr	r2, [pc, #48]	; (4006bc <system_init_flash+0x68>)
  40068a:	4b0b      	ldr	r3, [pc, #44]	; (4006b8 <system_init_flash+0x64>)
  40068c:	601a      	str	r2, [r3, #0]
  40068e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400690:	4a0b      	ldr	r2, [pc, #44]	; (4006c0 <system_init_flash+0x6c>)
  400692:	4b09      	ldr	r3, [pc, #36]	; (4006b8 <system_init_flash+0x64>)
  400694:	601a      	str	r2, [r3, #0]
  400696:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400698:	4a0a      	ldr	r2, [pc, #40]	; (4006c4 <system_init_flash+0x70>)
  40069a:	4b07      	ldr	r3, [pc, #28]	; (4006b8 <system_init_flash+0x64>)
  40069c:	601a      	str	r2, [r3, #0]
  40069e:	4770      	bx	lr
  4006a0:	01312cff 	.word	0x01312cff
  4006a4:	026259ff 	.word	0x026259ff
  4006a8:	039386ff 	.word	0x039386ff
  4006ac:	04c4b3ff 	.word	0x04c4b3ff
  4006b0:	05f5e0ff 	.word	0x05f5e0ff
  4006b4:	04000500 	.word	0x04000500
  4006b8:	400e0c00 	.word	0x400e0c00
  4006bc:	04000100 	.word	0x04000100
  4006c0:	04000200 	.word	0x04000200
  4006c4:	04000300 	.word	0x04000300

004006c8 <freq>:
/* funcoes                                                              */
/************************************************************************/



void freq(float freq) {
  4006c8:	b570      	push	{r4, r5, r6, lr}
  4006ca:	ed2d 8b02 	vpush	{d8}
	float dec = 1000000.0/(2.0*freq);
  4006ce:	4b2e      	ldr	r3, [pc, #184]	; (400788 <freq+0xc0>)
  4006d0:	4798      	blx	r3
  4006d2:	4602      	mov	r2, r0
  4006d4:	460b      	mov	r3, r1
  4006d6:	4c2d      	ldr	r4, [pc, #180]	; (40078c <freq+0xc4>)
  4006d8:	47a0      	blx	r4
  4006da:	4602      	mov	r2, r0
  4006dc:	460b      	mov	r3, r1
  4006de:	a128      	add	r1, pc, #160	; (adr r1, 400780 <freq+0xb8>)
  4006e0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4006e4:	4c2a      	ldr	r4, [pc, #168]	; (400790 <freq+0xc8>)
  4006e6:	47a0      	blx	r4
  4006e8:	4b2a      	ldr	r3, [pc, #168]	; (400794 <freq+0xcc>)
  4006ea:	4798      	blx	r3
  4006ec:	ee08 0a10 	vmov	s16, r0
	pio_set(LED_PIO, LED_PIO_IDX_MASK);
  4006f0:	4c29      	ldr	r4, [pc, #164]	; (400798 <freq+0xd0>)
  4006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4006f6:	4620      	mov	r0, r4
  4006f8:	4b28      	ldr	r3, [pc, #160]	; (40079c <freq+0xd4>)
  4006fa:	4798      	blx	r3
	pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);
  4006fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400700:	4620      	mov	r0, r4
  400702:	4b27      	ldr	r3, [pc, #156]	; (4007a0 <freq+0xd8>)
  400704:	4798      	blx	r3
	delay_ms(dec);
  400706:	eeb5 8a40 	vcmp.f32	s16, #0.0
  40070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40070e:	d023      	beq.n	400758 <freq+0x90>
  400710:	ee18 0a10 	vmov	r0, s16
  400714:	4b23      	ldr	r3, [pc, #140]	; (4007a4 <freq+0xdc>)
  400716:	4798      	blx	r3
  400718:	4b23      	ldr	r3, [pc, #140]	; (4007a8 <freq+0xe0>)
  40071a:	fba0 4503 	umull	r4, r5, r0, r3
  40071e:	fb03 5501 	mla	r5, r3, r1, r5
  400722:	f241 722c 	movw	r2, #5932	; 0x172c
  400726:	2300      	movs	r3, #0
  400728:	f241 702b 	movw	r0, #5931	; 0x172b
  40072c:	2100      	movs	r1, #0
  40072e:	1900      	adds	r0, r0, r4
  400730:	4169      	adcs	r1, r5
  400732:	4c1e      	ldr	r4, [pc, #120]	; (4007ac <freq+0xe4>)
  400734:	47a0      	blx	r4
  400736:	4606      	mov	r6, r0
  400738:	4c1d      	ldr	r4, [pc, #116]	; (4007b0 <freq+0xe8>)
  40073a:	47a0      	blx	r4
	pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  40073c:	4d16      	ldr	r5, [pc, #88]	; (400798 <freq+0xd0>)
  40073e:	f44f 7180 	mov.w	r1, #256	; 0x100
  400742:	4628      	mov	r0, r5
  400744:	4b16      	ldr	r3, [pc, #88]	; (4007a0 <freq+0xd8>)
  400746:	4798      	blx	r3
	pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);
  400748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40074c:	4628      	mov	r0, r5
  40074e:	4b13      	ldr	r3, [pc, #76]	; (40079c <freq+0xd4>)
  400750:	4798      	blx	r3
	delay_ms(dec);
  400752:	4630      	mov	r0, r6
  400754:	47a0      	blx	r4
  400756:	e00f      	b.n	400778 <freq+0xb0>
	delay_ms(dec);
  400758:	2033      	movs	r0, #51	; 0x33
  40075a:	4c15      	ldr	r4, [pc, #84]	; (4007b0 <freq+0xe8>)
  40075c:	47a0      	blx	r4
	pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  40075e:	4d0e      	ldr	r5, [pc, #56]	; (400798 <freq+0xd0>)
  400760:	f44f 7180 	mov.w	r1, #256	; 0x100
  400764:	4628      	mov	r0, r5
  400766:	4b0e      	ldr	r3, [pc, #56]	; (4007a0 <freq+0xd8>)
  400768:	4798      	blx	r3
	pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);
  40076a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40076e:	4628      	mov	r0, r5
  400770:	4b0a      	ldr	r3, [pc, #40]	; (40079c <freq+0xd4>)
  400772:	4798      	blx	r3
	delay_ms(dec);
  400774:	2033      	movs	r0, #51	; 0x33
  400776:	47a0      	blx	r4
	return;
}
  400778:	ecbd 8b02 	vpop	{d8}
  40077c:	bd70      	pop	{r4, r5, r6, pc}
  40077e:	bf00      	nop
  400780:	00000000 	.word	0x00000000
  400784:	412e8480 	.word	0x412e8480
  400788:	00400b39 	.word	0x00400b39
  40078c:	0040087d 	.word	0x0040087d
  400790:	00400e35 	.word	0x00400e35
  400794:	00401005 	.word	0x00401005
  400798:	400e1200 	.word	0x400e1200
  40079c:	0040021d 	.word	0x0040021d
  4007a0:	00400221 	.word	0x00400221
  4007a4:	004010d5 	.word	0x004010d5
  4007a8:	11e1a300 	.word	0x11e1a300
  4007ac:	004010a5 	.word	0x004010a5
  4007b0:	20400001 	.word	0x20400001

004007b4 <init>:


// Função de inicialização do uC
void init(void)
{
  4007b4:	b570      	push	{r4, r5, r6, lr}
  4007b6:	b082      	sub	sp, #8
	sysclk_init();
  4007b8:	4b0e      	ldr	r3, [pc, #56]	; (4007f4 <init+0x40>)
  4007ba:	4798      	blx	r3

	// Desativa WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  4007bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4007c0:	4b0d      	ldr	r3, [pc, #52]	; (4007f8 <init+0x44>)
  4007c2:	605a      	str	r2, [r3, #4]
	
	// Ativa o PIO na qual o LED foi conectado
	// para que possamos controlar o LED.
	pmc_enable_periph_clk(LED_PIO_ID);
  4007c4:	200c      	movs	r0, #12
  4007c6:	4c0d      	ldr	r4, [pc, #52]	; (4007fc <init+0x48>)
  4007c8:	47a0      	blx	r4
	
	// Inicializa PIO do botao
	// pmc_enable_periph_clk(BUT_PIO_ID);
	pmc_enable_periph_clk(BUZ_PIO_ID);
  4007ca:	200c      	movs	r0, #12
  4007cc:	47a0      	blx	r4
	
	//Inicializa PC8 como saída
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  4007ce:	4e0c      	ldr	r6, [pc, #48]	; (400800 <init+0x4c>)
  4007d0:	2400      	movs	r4, #0
  4007d2:	9400      	str	r4, [sp, #0]
  4007d4:	4623      	mov	r3, r4
  4007d6:	4622      	mov	r2, r4
  4007d8:	f44f 7180 	mov.w	r1, #256	; 0x100
  4007dc:	4630      	mov	r0, r6
  4007de:	4d09      	ldr	r5, [pc, #36]	; (400804 <init+0x50>)
  4007e0:	47a8      	blx	r5
	// configura pino ligado ao botão como entrada com um pull-up.
	//pio_set_input(BUT_PIO, BUT_PIO_IDX_MASK, PIO_DEFAULT);
	
	//pio_pull_up(BUT_PIO, BUT_PIO_IDX_MASK, PIO_DEFAULT);
	
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0, 0);
  4007e2:	9400      	str	r4, [sp, #0]
  4007e4:	4623      	mov	r3, r4
  4007e6:	4622      	mov	r2, r4
  4007e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4007ec:	4630      	mov	r0, r6
  4007ee:	47a8      	blx	r5
}
  4007f0:	b002      	add	sp, #8
  4007f2:	bd70      	pop	{r4, r5, r6, pc}
  4007f4:	004001ad 	.word	0x004001ad
  4007f8:	400e1850 	.word	0x400e1850
  4007fc:	00400429 	.word	0x00400429
  400800:	400e1200 	.word	0x400e1200
  400804:	00400225 	.word	0x00400225

00400808 <main>:
/* Main                                                                 */
/************************************************************************/

// Funcao principal chamada na inicalizacao do uC.
int main(void)
{
  400808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	init();
  40080c:	4b11      	ldr	r3, [pc, #68]	; (400854 <main+0x4c>)
  40080e:	4798      	blx	r3

	// super loop
	// aplicacoes embarcadas não devem sair do while(1).
	int i = 0;
  400810:	2500      	movs	r5, #0
	while (1)
	{	
		int t = sizeof(imperial_march_tempo)/sizeof(int);
		for(int n = 0; n < i; n++) {
			if(imperial_march_notes[i] != 0)
			freq((int)imperial_march_notes[i]*TRESQUARTOSTEMPO);
  400812:	4e11      	ldr	r6, [pc, #68]	; (400858 <main+0x50>)
  400814:	f04f 0800 	mov.w	r8, #0
  400818:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400868 <main+0x60>
  40081c:	e012      	b.n	400844 <main+0x3c>
		for(int n = 0; n < i; n++) {
  40081e:	3401      	adds	r4, #1
  400820:	42a5      	cmp	r5, r4
  400822:	d00f      	beq.n	400844 <main+0x3c>
			if(imperial_march_notes[i] != 0)
  400824:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  400828:	2800      	cmp	r0, #0
  40082a:	d0f8      	beq.n	40081e <main+0x16>
			freq((int)imperial_march_notes[i]*TRESQUARTOSTEMPO);
  40082c:	47b0      	blx	r6
  40082e:	4642      	mov	r2, r8
  400830:	464b      	mov	r3, r9
  400832:	f8df a038 	ldr.w	sl, [pc, #56]	; 40086c <main+0x64>
  400836:	47d0      	blx	sl
  400838:	4b08      	ldr	r3, [pc, #32]	; (40085c <main+0x54>)
  40083a:	4798      	blx	r3
  40083c:	4b08      	ldr	r3, [pc, #32]	; (400860 <main+0x58>)
  40083e:	4798      	blx	r3
  400840:	e7ed      	b.n	40081e <main+0x16>
		}
		if(i < t){
			i++;
		}else{
			i = 0;
  400842:	2500      	movs	r5, #0
		if(i < t){
  400844:	2d13      	cmp	r5, #19
  400846:	dcfc      	bgt.n	400842 <main+0x3a>
			i++;
  400848:	3501      	adds	r5, #1
		for(int n = 0; n < i; n++) {
  40084a:	2d00      	cmp	r5, #0
  40084c:	ddfa      	ble.n	400844 <main+0x3c>
  40084e:	2400      	movs	r4, #0
			if(imperial_march_notes[i] != 0)
  400850:	4f04      	ldr	r7, [pc, #16]	; (400864 <main+0x5c>)
  400852:	e7e7      	b.n	400824 <main+0x1c>
  400854:	004007b5 	.word	0x004007b5
  400858:	00400b15 	.word	0x00400b15
  40085c:	00401005 	.word	0x00401005
  400860:	004006c9 	.word	0x004006c9
  400864:	20400010 	.word	0x20400010
  400868:	3fe80000 	.word	0x3fe80000
  40086c:	00400be1 	.word	0x00400be1

00400870 <__aeabi_drsub>:
  400870:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  400874:	e002      	b.n	40087c <__adddf3>
  400876:	bf00      	nop

00400878 <__aeabi_dsub>:
  400878:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040087c <__adddf3>:
  40087c:	b530      	push	{r4, r5, lr}
  40087e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  400882:	ea4f 0543 	mov.w	r5, r3, lsl #1
  400886:	ea94 0f05 	teq	r4, r5
  40088a:	bf08      	it	eq
  40088c:	ea90 0f02 	teqeq	r0, r2
  400890:	bf1f      	itttt	ne
  400892:	ea54 0c00 	orrsne.w	ip, r4, r0
  400896:	ea55 0c02 	orrsne.w	ip, r5, r2
  40089a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40089e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4008a2:	f000 80e2 	beq.w	400a6a <__adddf3+0x1ee>
  4008a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4008aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4008ae:	bfb8      	it	lt
  4008b0:	426d      	neglt	r5, r5
  4008b2:	dd0c      	ble.n	4008ce <__adddf3+0x52>
  4008b4:	442c      	add	r4, r5
  4008b6:	ea80 0202 	eor.w	r2, r0, r2
  4008ba:	ea81 0303 	eor.w	r3, r1, r3
  4008be:	ea82 0000 	eor.w	r0, r2, r0
  4008c2:	ea83 0101 	eor.w	r1, r3, r1
  4008c6:	ea80 0202 	eor.w	r2, r0, r2
  4008ca:	ea81 0303 	eor.w	r3, r1, r3
  4008ce:	2d36      	cmp	r5, #54	; 0x36
  4008d0:	bf88      	it	hi
  4008d2:	bd30      	pophi	{r4, r5, pc}
  4008d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4008dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4008e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4008e4:	d002      	beq.n	4008ec <__adddf3+0x70>
  4008e6:	4240      	negs	r0, r0
  4008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4008ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4008f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4008f8:	d002      	beq.n	400900 <__adddf3+0x84>
  4008fa:	4252      	negs	r2, r2
  4008fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  400900:	ea94 0f05 	teq	r4, r5
  400904:	f000 80a7 	beq.w	400a56 <__adddf3+0x1da>
  400908:	f1a4 0401 	sub.w	r4, r4, #1
  40090c:	f1d5 0e20 	rsbs	lr, r5, #32
  400910:	db0d      	blt.n	40092e <__adddf3+0xb2>
  400912:	fa02 fc0e 	lsl.w	ip, r2, lr
  400916:	fa22 f205 	lsr.w	r2, r2, r5
  40091a:	1880      	adds	r0, r0, r2
  40091c:	f141 0100 	adc.w	r1, r1, #0
  400920:	fa03 f20e 	lsl.w	r2, r3, lr
  400924:	1880      	adds	r0, r0, r2
  400926:	fa43 f305 	asr.w	r3, r3, r5
  40092a:	4159      	adcs	r1, r3
  40092c:	e00e      	b.n	40094c <__adddf3+0xd0>
  40092e:	f1a5 0520 	sub.w	r5, r5, #32
  400932:	f10e 0e20 	add.w	lr, lr, #32
  400936:	2a01      	cmp	r2, #1
  400938:	fa03 fc0e 	lsl.w	ip, r3, lr
  40093c:	bf28      	it	cs
  40093e:	f04c 0c02 	orrcs.w	ip, ip, #2
  400942:	fa43 f305 	asr.w	r3, r3, r5
  400946:	18c0      	adds	r0, r0, r3
  400948:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40094c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  400950:	d507      	bpl.n	400962 <__adddf3+0xe6>
  400952:	f04f 0e00 	mov.w	lr, #0
  400956:	f1dc 0c00 	rsbs	ip, ip, #0
  40095a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40095e:	eb6e 0101 	sbc.w	r1, lr, r1
  400962:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  400966:	d31b      	bcc.n	4009a0 <__adddf3+0x124>
  400968:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40096c:	d30c      	bcc.n	400988 <__adddf3+0x10c>
  40096e:	0849      	lsrs	r1, r1, #1
  400970:	ea5f 0030 	movs.w	r0, r0, rrx
  400974:	ea4f 0c3c 	mov.w	ip, ip, rrx
  400978:	f104 0401 	add.w	r4, r4, #1
  40097c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  400980:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  400984:	f080 809a 	bcs.w	400abc <__adddf3+0x240>
  400988:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40098c:	bf08      	it	eq
  40098e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  400992:	f150 0000 	adcs.w	r0, r0, #0
  400996:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40099a:	ea41 0105 	orr.w	r1, r1, r5
  40099e:	bd30      	pop	{r4, r5, pc}
  4009a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4009a4:	4140      	adcs	r0, r0
  4009a6:	eb41 0101 	adc.w	r1, r1, r1
  4009aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4009ae:	f1a4 0401 	sub.w	r4, r4, #1
  4009b2:	d1e9      	bne.n	400988 <__adddf3+0x10c>
  4009b4:	f091 0f00 	teq	r1, #0
  4009b8:	bf04      	itt	eq
  4009ba:	4601      	moveq	r1, r0
  4009bc:	2000      	moveq	r0, #0
  4009be:	fab1 f381 	clz	r3, r1
  4009c2:	bf08      	it	eq
  4009c4:	3320      	addeq	r3, #32
  4009c6:	f1a3 030b 	sub.w	r3, r3, #11
  4009ca:	f1b3 0220 	subs.w	r2, r3, #32
  4009ce:	da0c      	bge.n	4009ea <__adddf3+0x16e>
  4009d0:	320c      	adds	r2, #12
  4009d2:	dd08      	ble.n	4009e6 <__adddf3+0x16a>
  4009d4:	f102 0c14 	add.w	ip, r2, #20
  4009d8:	f1c2 020c 	rsb	r2, r2, #12
  4009dc:	fa01 f00c 	lsl.w	r0, r1, ip
  4009e0:	fa21 f102 	lsr.w	r1, r1, r2
  4009e4:	e00c      	b.n	400a00 <__adddf3+0x184>
  4009e6:	f102 0214 	add.w	r2, r2, #20
  4009ea:	bfd8      	it	le
  4009ec:	f1c2 0c20 	rsble	ip, r2, #32
  4009f0:	fa01 f102 	lsl.w	r1, r1, r2
  4009f4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4009f8:	bfdc      	itt	le
  4009fa:	ea41 010c 	orrle.w	r1, r1, ip
  4009fe:	4090      	lslle	r0, r2
  400a00:	1ae4      	subs	r4, r4, r3
  400a02:	bfa2      	ittt	ge
  400a04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  400a08:	4329      	orrge	r1, r5
  400a0a:	bd30      	popge	{r4, r5, pc}
  400a0c:	ea6f 0404 	mvn.w	r4, r4
  400a10:	3c1f      	subs	r4, #31
  400a12:	da1c      	bge.n	400a4e <__adddf3+0x1d2>
  400a14:	340c      	adds	r4, #12
  400a16:	dc0e      	bgt.n	400a36 <__adddf3+0x1ba>
  400a18:	f104 0414 	add.w	r4, r4, #20
  400a1c:	f1c4 0220 	rsb	r2, r4, #32
  400a20:	fa20 f004 	lsr.w	r0, r0, r4
  400a24:	fa01 f302 	lsl.w	r3, r1, r2
  400a28:	ea40 0003 	orr.w	r0, r0, r3
  400a2c:	fa21 f304 	lsr.w	r3, r1, r4
  400a30:	ea45 0103 	orr.w	r1, r5, r3
  400a34:	bd30      	pop	{r4, r5, pc}
  400a36:	f1c4 040c 	rsb	r4, r4, #12
  400a3a:	f1c4 0220 	rsb	r2, r4, #32
  400a3e:	fa20 f002 	lsr.w	r0, r0, r2
  400a42:	fa01 f304 	lsl.w	r3, r1, r4
  400a46:	ea40 0003 	orr.w	r0, r0, r3
  400a4a:	4629      	mov	r1, r5
  400a4c:	bd30      	pop	{r4, r5, pc}
  400a4e:	fa21 f004 	lsr.w	r0, r1, r4
  400a52:	4629      	mov	r1, r5
  400a54:	bd30      	pop	{r4, r5, pc}
  400a56:	f094 0f00 	teq	r4, #0
  400a5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  400a5e:	bf06      	itte	eq
  400a60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  400a64:	3401      	addeq	r4, #1
  400a66:	3d01      	subne	r5, #1
  400a68:	e74e      	b.n	400908 <__adddf3+0x8c>
  400a6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  400a6e:	bf18      	it	ne
  400a70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  400a74:	d029      	beq.n	400aca <__adddf3+0x24e>
  400a76:	ea94 0f05 	teq	r4, r5
  400a7a:	bf08      	it	eq
  400a7c:	ea90 0f02 	teqeq	r0, r2
  400a80:	d005      	beq.n	400a8e <__adddf3+0x212>
  400a82:	ea54 0c00 	orrs.w	ip, r4, r0
  400a86:	bf04      	itt	eq
  400a88:	4619      	moveq	r1, r3
  400a8a:	4610      	moveq	r0, r2
  400a8c:	bd30      	pop	{r4, r5, pc}
  400a8e:	ea91 0f03 	teq	r1, r3
  400a92:	bf1e      	ittt	ne
  400a94:	2100      	movne	r1, #0
  400a96:	2000      	movne	r0, #0
  400a98:	bd30      	popne	{r4, r5, pc}
  400a9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  400a9e:	d105      	bne.n	400aac <__adddf3+0x230>
  400aa0:	0040      	lsls	r0, r0, #1
  400aa2:	4149      	adcs	r1, r1
  400aa4:	bf28      	it	cs
  400aa6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  400aaa:	bd30      	pop	{r4, r5, pc}
  400aac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  400ab0:	bf3c      	itt	cc
  400ab2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  400ab6:	bd30      	popcc	{r4, r5, pc}
  400ab8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  400abc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  400ac0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400ac4:	f04f 0000 	mov.w	r0, #0
  400ac8:	bd30      	pop	{r4, r5, pc}
  400aca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  400ace:	bf1a      	itte	ne
  400ad0:	4619      	movne	r1, r3
  400ad2:	4610      	movne	r0, r2
  400ad4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  400ad8:	bf1c      	itt	ne
  400ada:	460b      	movne	r3, r1
  400adc:	4602      	movne	r2, r0
  400ade:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  400ae2:	bf06      	itte	eq
  400ae4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  400ae8:	ea91 0f03 	teqeq	r1, r3
  400aec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  400af0:	bd30      	pop	{r4, r5, pc}
  400af2:	bf00      	nop

00400af4 <__aeabi_ui2d>:
  400af4:	f090 0f00 	teq	r0, #0
  400af8:	bf04      	itt	eq
  400afa:	2100      	moveq	r1, #0
  400afc:	4770      	bxeq	lr
  400afe:	b530      	push	{r4, r5, lr}
  400b00:	f44f 6480 	mov.w	r4, #1024	; 0x400
  400b04:	f104 0432 	add.w	r4, r4, #50	; 0x32
  400b08:	f04f 0500 	mov.w	r5, #0
  400b0c:	f04f 0100 	mov.w	r1, #0
  400b10:	e750      	b.n	4009b4 <__adddf3+0x138>
  400b12:	bf00      	nop

00400b14 <__aeabi_i2d>:
  400b14:	f090 0f00 	teq	r0, #0
  400b18:	bf04      	itt	eq
  400b1a:	2100      	moveq	r1, #0
  400b1c:	4770      	bxeq	lr
  400b1e:	b530      	push	{r4, r5, lr}
  400b20:	f44f 6480 	mov.w	r4, #1024	; 0x400
  400b24:	f104 0432 	add.w	r4, r4, #50	; 0x32
  400b28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  400b2c:	bf48      	it	mi
  400b2e:	4240      	negmi	r0, r0
  400b30:	f04f 0100 	mov.w	r1, #0
  400b34:	e73e      	b.n	4009b4 <__adddf3+0x138>
  400b36:	bf00      	nop

00400b38 <__aeabi_f2d>:
  400b38:	0042      	lsls	r2, r0, #1
  400b3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  400b3e:	ea4f 0131 	mov.w	r1, r1, rrx
  400b42:	ea4f 7002 	mov.w	r0, r2, lsl #28
  400b46:	bf1f      	itttt	ne
  400b48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  400b4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  400b50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  400b54:	4770      	bxne	lr
  400b56:	f092 0f00 	teq	r2, #0
  400b5a:	bf14      	ite	ne
  400b5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  400b60:	4770      	bxeq	lr
  400b62:	b530      	push	{r4, r5, lr}
  400b64:	f44f 7460 	mov.w	r4, #896	; 0x380
  400b68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  400b6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  400b70:	e720      	b.n	4009b4 <__adddf3+0x138>
  400b72:	bf00      	nop

00400b74 <__aeabi_ul2d>:
  400b74:	ea50 0201 	orrs.w	r2, r0, r1
  400b78:	bf08      	it	eq
  400b7a:	4770      	bxeq	lr
  400b7c:	b530      	push	{r4, r5, lr}
  400b7e:	f04f 0500 	mov.w	r5, #0
  400b82:	e00a      	b.n	400b9a <__aeabi_l2d+0x16>

00400b84 <__aeabi_l2d>:
  400b84:	ea50 0201 	orrs.w	r2, r0, r1
  400b88:	bf08      	it	eq
  400b8a:	4770      	bxeq	lr
  400b8c:	b530      	push	{r4, r5, lr}
  400b8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  400b92:	d502      	bpl.n	400b9a <__aeabi_l2d+0x16>
  400b94:	4240      	negs	r0, r0
  400b96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  400b9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  400b9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  400ba2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  400ba6:	f43f aedc 	beq.w	400962 <__adddf3+0xe6>
  400baa:	f04f 0203 	mov.w	r2, #3
  400bae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  400bb2:	bf18      	it	ne
  400bb4:	3203      	addne	r2, #3
  400bb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  400bba:	bf18      	it	ne
  400bbc:	3203      	addne	r2, #3
  400bbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  400bc2:	f1c2 0320 	rsb	r3, r2, #32
  400bc6:	fa00 fc03 	lsl.w	ip, r0, r3
  400bca:	fa20 f002 	lsr.w	r0, r0, r2
  400bce:	fa01 fe03 	lsl.w	lr, r1, r3
  400bd2:	ea40 000e 	orr.w	r0, r0, lr
  400bd6:	fa21 f102 	lsr.w	r1, r1, r2
  400bda:	4414      	add	r4, r2
  400bdc:	e6c1      	b.n	400962 <__adddf3+0xe6>
  400bde:	bf00      	nop

00400be0 <__aeabi_dmul>:
  400be0:	b570      	push	{r4, r5, r6, lr}
  400be2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  400be6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  400bea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  400bee:	bf1d      	ittte	ne
  400bf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  400bf4:	ea94 0f0c 	teqne	r4, ip
  400bf8:	ea95 0f0c 	teqne	r5, ip
  400bfc:	f000 f8de 	bleq	400dbc <__aeabi_dmul+0x1dc>
  400c00:	442c      	add	r4, r5
  400c02:	ea81 0603 	eor.w	r6, r1, r3
  400c06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  400c0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  400c0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  400c12:	bf18      	it	ne
  400c14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  400c18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400c20:	d038      	beq.n	400c94 <__aeabi_dmul+0xb4>
  400c22:	fba0 ce02 	umull	ip, lr, r0, r2
  400c26:	f04f 0500 	mov.w	r5, #0
  400c2a:	fbe1 e502 	umlal	lr, r5, r1, r2
  400c2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  400c32:	fbe0 e503 	umlal	lr, r5, r0, r3
  400c36:	f04f 0600 	mov.w	r6, #0
  400c3a:	fbe1 5603 	umlal	r5, r6, r1, r3
  400c3e:	f09c 0f00 	teq	ip, #0
  400c42:	bf18      	it	ne
  400c44:	f04e 0e01 	orrne.w	lr, lr, #1
  400c48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  400c4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  400c50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  400c54:	d204      	bcs.n	400c60 <__aeabi_dmul+0x80>
  400c56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  400c5a:	416d      	adcs	r5, r5
  400c5c:	eb46 0606 	adc.w	r6, r6, r6
  400c60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  400c64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  400c68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  400c6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  400c70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  400c74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  400c78:	bf88      	it	hi
  400c7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  400c7e:	d81e      	bhi.n	400cbe <__aeabi_dmul+0xde>
  400c80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  400c84:	bf08      	it	eq
  400c86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  400c8a:	f150 0000 	adcs.w	r0, r0, #0
  400c8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  400c92:	bd70      	pop	{r4, r5, r6, pc}
  400c94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  400c98:	ea46 0101 	orr.w	r1, r6, r1
  400c9c:	ea40 0002 	orr.w	r0, r0, r2
  400ca0:	ea81 0103 	eor.w	r1, r1, r3
  400ca4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  400ca8:	bfc2      	ittt	gt
  400caa:	ebd4 050c 	rsbsgt	r5, r4, ip
  400cae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  400cb2:	bd70      	popgt	{r4, r5, r6, pc}
  400cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400cb8:	f04f 0e00 	mov.w	lr, #0
  400cbc:	3c01      	subs	r4, #1
  400cbe:	f300 80ab 	bgt.w	400e18 <__aeabi_dmul+0x238>
  400cc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  400cc6:	bfde      	ittt	le
  400cc8:	2000      	movle	r0, #0
  400cca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  400cce:	bd70      	pople	{r4, r5, r6, pc}
  400cd0:	f1c4 0400 	rsb	r4, r4, #0
  400cd4:	3c20      	subs	r4, #32
  400cd6:	da35      	bge.n	400d44 <__aeabi_dmul+0x164>
  400cd8:	340c      	adds	r4, #12
  400cda:	dc1b      	bgt.n	400d14 <__aeabi_dmul+0x134>
  400cdc:	f104 0414 	add.w	r4, r4, #20
  400ce0:	f1c4 0520 	rsb	r5, r4, #32
  400ce4:	fa00 f305 	lsl.w	r3, r0, r5
  400ce8:	fa20 f004 	lsr.w	r0, r0, r4
  400cec:	fa01 f205 	lsl.w	r2, r1, r5
  400cf0:	ea40 0002 	orr.w	r0, r0, r2
  400cf4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  400cf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  400cfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  400d00:	fa21 f604 	lsr.w	r6, r1, r4
  400d04:	eb42 0106 	adc.w	r1, r2, r6
  400d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  400d0c:	bf08      	it	eq
  400d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  400d12:	bd70      	pop	{r4, r5, r6, pc}
  400d14:	f1c4 040c 	rsb	r4, r4, #12
  400d18:	f1c4 0520 	rsb	r5, r4, #32
  400d1c:	fa00 f304 	lsl.w	r3, r0, r4
  400d20:	fa20 f005 	lsr.w	r0, r0, r5
  400d24:	fa01 f204 	lsl.w	r2, r1, r4
  400d28:	ea40 0002 	orr.w	r0, r0, r2
  400d2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  400d30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  400d34:	f141 0100 	adc.w	r1, r1, #0
  400d38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  400d3c:	bf08      	it	eq
  400d3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  400d42:	bd70      	pop	{r4, r5, r6, pc}
  400d44:	f1c4 0520 	rsb	r5, r4, #32
  400d48:	fa00 f205 	lsl.w	r2, r0, r5
  400d4c:	ea4e 0e02 	orr.w	lr, lr, r2
  400d50:	fa20 f304 	lsr.w	r3, r0, r4
  400d54:	fa01 f205 	lsl.w	r2, r1, r5
  400d58:	ea43 0302 	orr.w	r3, r3, r2
  400d5c:	fa21 f004 	lsr.w	r0, r1, r4
  400d60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  400d64:	fa21 f204 	lsr.w	r2, r1, r4
  400d68:	ea20 0002 	bic.w	r0, r0, r2
  400d6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  400d70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  400d74:	bf08      	it	eq
  400d76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  400d7a:	bd70      	pop	{r4, r5, r6, pc}
  400d7c:	f094 0f00 	teq	r4, #0
  400d80:	d10f      	bne.n	400da2 <__aeabi_dmul+0x1c2>
  400d82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  400d86:	0040      	lsls	r0, r0, #1
  400d88:	eb41 0101 	adc.w	r1, r1, r1
  400d8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  400d90:	bf08      	it	eq
  400d92:	3c01      	subeq	r4, #1
  400d94:	d0f7      	beq.n	400d86 <__aeabi_dmul+0x1a6>
  400d96:	ea41 0106 	orr.w	r1, r1, r6
  400d9a:	f095 0f00 	teq	r5, #0
  400d9e:	bf18      	it	ne
  400da0:	4770      	bxne	lr
  400da2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  400da6:	0052      	lsls	r2, r2, #1
  400da8:	eb43 0303 	adc.w	r3, r3, r3
  400dac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  400db0:	bf08      	it	eq
  400db2:	3d01      	subeq	r5, #1
  400db4:	d0f7      	beq.n	400da6 <__aeabi_dmul+0x1c6>
  400db6:	ea43 0306 	orr.w	r3, r3, r6
  400dba:	4770      	bx	lr
  400dbc:	ea94 0f0c 	teq	r4, ip
  400dc0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  400dc4:	bf18      	it	ne
  400dc6:	ea95 0f0c 	teqne	r5, ip
  400dca:	d00c      	beq.n	400de6 <__aeabi_dmul+0x206>
  400dcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  400dd0:	bf18      	it	ne
  400dd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  400dd6:	d1d1      	bne.n	400d7c <__aeabi_dmul+0x19c>
  400dd8:	ea81 0103 	eor.w	r1, r1, r3
  400ddc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  400de0:	f04f 0000 	mov.w	r0, #0
  400de4:	bd70      	pop	{r4, r5, r6, pc}
  400de6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  400dea:	bf06      	itte	eq
  400dec:	4610      	moveq	r0, r2
  400dee:	4619      	moveq	r1, r3
  400df0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  400df4:	d019      	beq.n	400e2a <__aeabi_dmul+0x24a>
  400df6:	ea94 0f0c 	teq	r4, ip
  400dfa:	d102      	bne.n	400e02 <__aeabi_dmul+0x222>
  400dfc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  400e00:	d113      	bne.n	400e2a <__aeabi_dmul+0x24a>
  400e02:	ea95 0f0c 	teq	r5, ip
  400e06:	d105      	bne.n	400e14 <__aeabi_dmul+0x234>
  400e08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  400e0c:	bf1c      	itt	ne
  400e0e:	4610      	movne	r0, r2
  400e10:	4619      	movne	r1, r3
  400e12:	d10a      	bne.n	400e2a <__aeabi_dmul+0x24a>
  400e14:	ea81 0103 	eor.w	r1, r1, r3
  400e18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  400e1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  400e20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400e24:	f04f 0000 	mov.w	r0, #0
  400e28:	bd70      	pop	{r4, r5, r6, pc}
  400e2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  400e2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  400e32:	bd70      	pop	{r4, r5, r6, pc}

00400e34 <__aeabi_ddiv>:
  400e34:	b570      	push	{r4, r5, r6, lr}
  400e36:	f04f 0cff 	mov.w	ip, #255	; 0xff
  400e3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  400e3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  400e42:	bf1d      	ittte	ne
  400e44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  400e48:	ea94 0f0c 	teqne	r4, ip
  400e4c:	ea95 0f0c 	teqne	r5, ip
  400e50:	f000 f8a7 	bleq	400fa2 <__aeabi_ddiv+0x16e>
  400e54:	eba4 0405 	sub.w	r4, r4, r5
  400e58:	ea81 0e03 	eor.w	lr, r1, r3
  400e5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  400e60:	ea4f 3101 	mov.w	r1, r1, lsl #12
  400e64:	f000 8088 	beq.w	400f78 <__aeabi_ddiv+0x144>
  400e68:	ea4f 3303 	mov.w	r3, r3, lsl #12
  400e6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  400e70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  400e74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  400e78:	ea4f 2202 	mov.w	r2, r2, lsl #8
  400e7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  400e80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  400e84:	ea4f 2600 	mov.w	r6, r0, lsl #8
  400e88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  400e8c:	429d      	cmp	r5, r3
  400e8e:	bf08      	it	eq
  400e90:	4296      	cmpeq	r6, r2
  400e92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  400e96:	f504 7440 	add.w	r4, r4, #768	; 0x300
  400e9a:	d202      	bcs.n	400ea2 <__aeabi_ddiv+0x6e>
  400e9c:	085b      	lsrs	r3, r3, #1
  400e9e:	ea4f 0232 	mov.w	r2, r2, rrx
  400ea2:	1ab6      	subs	r6, r6, r2
  400ea4:	eb65 0503 	sbc.w	r5, r5, r3
  400ea8:	085b      	lsrs	r3, r3, #1
  400eaa:	ea4f 0232 	mov.w	r2, r2, rrx
  400eae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  400eb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  400eb6:	ebb6 0e02 	subs.w	lr, r6, r2
  400eba:	eb75 0e03 	sbcs.w	lr, r5, r3
  400ebe:	bf22      	ittt	cs
  400ec0:	1ab6      	subcs	r6, r6, r2
  400ec2:	4675      	movcs	r5, lr
  400ec4:	ea40 000c 	orrcs.w	r0, r0, ip
  400ec8:	085b      	lsrs	r3, r3, #1
  400eca:	ea4f 0232 	mov.w	r2, r2, rrx
  400ece:	ebb6 0e02 	subs.w	lr, r6, r2
  400ed2:	eb75 0e03 	sbcs.w	lr, r5, r3
  400ed6:	bf22      	ittt	cs
  400ed8:	1ab6      	subcs	r6, r6, r2
  400eda:	4675      	movcs	r5, lr
  400edc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  400ee0:	085b      	lsrs	r3, r3, #1
  400ee2:	ea4f 0232 	mov.w	r2, r2, rrx
  400ee6:	ebb6 0e02 	subs.w	lr, r6, r2
  400eea:	eb75 0e03 	sbcs.w	lr, r5, r3
  400eee:	bf22      	ittt	cs
  400ef0:	1ab6      	subcs	r6, r6, r2
  400ef2:	4675      	movcs	r5, lr
  400ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  400ef8:	085b      	lsrs	r3, r3, #1
  400efa:	ea4f 0232 	mov.w	r2, r2, rrx
  400efe:	ebb6 0e02 	subs.w	lr, r6, r2
  400f02:	eb75 0e03 	sbcs.w	lr, r5, r3
  400f06:	bf22      	ittt	cs
  400f08:	1ab6      	subcs	r6, r6, r2
  400f0a:	4675      	movcs	r5, lr
  400f0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  400f10:	ea55 0e06 	orrs.w	lr, r5, r6
  400f14:	d018      	beq.n	400f48 <__aeabi_ddiv+0x114>
  400f16:	ea4f 1505 	mov.w	r5, r5, lsl #4
  400f1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  400f1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  400f22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  400f26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  400f2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  400f2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  400f32:	d1c0      	bne.n	400eb6 <__aeabi_ddiv+0x82>
  400f34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  400f38:	d10b      	bne.n	400f52 <__aeabi_ddiv+0x11e>
  400f3a:	ea41 0100 	orr.w	r1, r1, r0
  400f3e:	f04f 0000 	mov.w	r0, #0
  400f42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  400f46:	e7b6      	b.n	400eb6 <__aeabi_ddiv+0x82>
  400f48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  400f4c:	bf04      	itt	eq
  400f4e:	4301      	orreq	r1, r0
  400f50:	2000      	moveq	r0, #0
  400f52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  400f56:	bf88      	it	hi
  400f58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  400f5c:	f63f aeaf 	bhi.w	400cbe <__aeabi_dmul+0xde>
  400f60:	ebb5 0c03 	subs.w	ip, r5, r3
  400f64:	bf04      	itt	eq
  400f66:	ebb6 0c02 	subseq.w	ip, r6, r2
  400f6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  400f6e:	f150 0000 	adcs.w	r0, r0, #0
  400f72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  400f76:	bd70      	pop	{r4, r5, r6, pc}
  400f78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  400f7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  400f80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  400f84:	bfc2      	ittt	gt
  400f86:	ebd4 050c 	rsbsgt	r5, r4, ip
  400f8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  400f8e:	bd70      	popgt	{r4, r5, r6, pc}
  400f90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400f94:	f04f 0e00 	mov.w	lr, #0
  400f98:	3c01      	subs	r4, #1
  400f9a:	e690      	b.n	400cbe <__aeabi_dmul+0xde>
  400f9c:	ea45 0e06 	orr.w	lr, r5, r6
  400fa0:	e68d      	b.n	400cbe <__aeabi_dmul+0xde>
  400fa2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  400fa6:	ea94 0f0c 	teq	r4, ip
  400faa:	bf08      	it	eq
  400fac:	ea95 0f0c 	teqeq	r5, ip
  400fb0:	f43f af3b 	beq.w	400e2a <__aeabi_dmul+0x24a>
  400fb4:	ea94 0f0c 	teq	r4, ip
  400fb8:	d10a      	bne.n	400fd0 <__aeabi_ddiv+0x19c>
  400fba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  400fbe:	f47f af34 	bne.w	400e2a <__aeabi_dmul+0x24a>
  400fc2:	ea95 0f0c 	teq	r5, ip
  400fc6:	f47f af25 	bne.w	400e14 <__aeabi_dmul+0x234>
  400fca:	4610      	mov	r0, r2
  400fcc:	4619      	mov	r1, r3
  400fce:	e72c      	b.n	400e2a <__aeabi_dmul+0x24a>
  400fd0:	ea95 0f0c 	teq	r5, ip
  400fd4:	d106      	bne.n	400fe4 <__aeabi_ddiv+0x1b0>
  400fd6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  400fda:	f43f aefd 	beq.w	400dd8 <__aeabi_dmul+0x1f8>
  400fde:	4610      	mov	r0, r2
  400fe0:	4619      	mov	r1, r3
  400fe2:	e722      	b.n	400e2a <__aeabi_dmul+0x24a>
  400fe4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  400fe8:	bf18      	it	ne
  400fea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  400fee:	f47f aec5 	bne.w	400d7c <__aeabi_dmul+0x19c>
  400ff2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  400ff6:	f47f af0d 	bne.w	400e14 <__aeabi_dmul+0x234>
  400ffa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  400ffe:	f47f aeeb 	bne.w	400dd8 <__aeabi_dmul+0x1f8>
  401002:	e712      	b.n	400e2a <__aeabi_dmul+0x24a>

00401004 <__aeabi_d2f>:
  401004:	ea4f 0241 	mov.w	r2, r1, lsl #1
  401008:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40100c:	bf24      	itt	cs
  40100e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  401012:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  401016:	d90d      	bls.n	401034 <__aeabi_d2f+0x30>
  401018:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40101c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  401020:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  401024:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  401028:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40102c:	bf08      	it	eq
  40102e:	f020 0001 	biceq.w	r0, r0, #1
  401032:	4770      	bx	lr
  401034:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  401038:	d121      	bne.n	40107e <__aeabi_d2f+0x7a>
  40103a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40103e:	bfbc      	itt	lt
  401040:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  401044:	4770      	bxlt	lr
  401046:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40104a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40104e:	f1c2 0218 	rsb	r2, r2, #24
  401052:	f1c2 0c20 	rsb	ip, r2, #32
  401056:	fa10 f30c 	lsls.w	r3, r0, ip
  40105a:	fa20 f002 	lsr.w	r0, r0, r2
  40105e:	bf18      	it	ne
  401060:	f040 0001 	orrne.w	r0, r0, #1
  401064:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  401068:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40106c:	fa03 fc0c 	lsl.w	ip, r3, ip
  401070:	ea40 000c 	orr.w	r0, r0, ip
  401074:	fa23 f302 	lsr.w	r3, r3, r2
  401078:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40107c:	e7cc      	b.n	401018 <__aeabi_d2f+0x14>
  40107e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  401082:	d107      	bne.n	401094 <__aeabi_d2f+0x90>
  401084:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  401088:	bf1e      	ittt	ne
  40108a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40108e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  401092:	4770      	bxne	lr
  401094:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  401098:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40109c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4010a0:	4770      	bx	lr
  4010a2:	bf00      	nop

004010a4 <__aeabi_uldivmod>:
  4010a4:	b953      	cbnz	r3, 4010bc <__aeabi_uldivmod+0x18>
  4010a6:	b94a      	cbnz	r2, 4010bc <__aeabi_uldivmod+0x18>
  4010a8:	2900      	cmp	r1, #0
  4010aa:	bf08      	it	eq
  4010ac:	2800      	cmpeq	r0, #0
  4010ae:	bf1c      	itt	ne
  4010b0:	f04f 31ff 	movne.w	r1, #4294967295
  4010b4:	f04f 30ff 	movne.w	r0, #4294967295
  4010b8:	f000 b9a0 	b.w	4013fc <__aeabi_idiv0>
  4010bc:	f1ad 0c08 	sub.w	ip, sp, #8
  4010c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4010c4:	f000 f82c 	bl	401120 <__udivmoddi4>
  4010c8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4010cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4010d0:	b004      	add	sp, #16
  4010d2:	4770      	bx	lr

004010d4 <__aeabi_f2ulz>:
  4010d4:	b5d0      	push	{r4, r6, r7, lr}
  4010d6:	f7ff fd2f 	bl	400b38 <__aeabi_f2d>
  4010da:	2200      	movs	r2, #0
  4010dc:	4b0e      	ldr	r3, [pc, #56]	; (401118 <__aeabi_f2ulz+0x44>)
  4010de:	4606      	mov	r6, r0
  4010e0:	460f      	mov	r7, r1
  4010e2:	f7ff fd7d 	bl	400be0 <__aeabi_dmul>
  4010e6:	f000 f98b 	bl	401400 <__aeabi_d2uiz>
  4010ea:	4604      	mov	r4, r0
  4010ec:	f7ff fd02 	bl	400af4 <__aeabi_ui2d>
  4010f0:	2200      	movs	r2, #0
  4010f2:	4b0a      	ldr	r3, [pc, #40]	; (40111c <__aeabi_f2ulz+0x48>)
  4010f4:	f7ff fd74 	bl	400be0 <__aeabi_dmul>
  4010f8:	4602      	mov	r2, r0
  4010fa:	460b      	mov	r3, r1
  4010fc:	4630      	mov	r0, r6
  4010fe:	4639      	mov	r1, r7
  401100:	f7ff fbba 	bl	400878 <__aeabi_dsub>
  401104:	f000 f97c 	bl	401400 <__aeabi_d2uiz>
  401108:	4623      	mov	r3, r4
  40110a:	2200      	movs	r2, #0
  40110c:	ea42 0200 	orr.w	r2, r2, r0
  401110:	4610      	mov	r0, r2
  401112:	4619      	mov	r1, r3
  401114:	bdd0      	pop	{r4, r6, r7, pc}
  401116:	bf00      	nop
  401118:	3df00000 	.word	0x3df00000
  40111c:	41f00000 	.word	0x41f00000

00401120 <__udivmoddi4>:
  401120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401124:	468c      	mov	ip, r1
  401126:	460d      	mov	r5, r1
  401128:	4604      	mov	r4, r0
  40112a:	9e08      	ldr	r6, [sp, #32]
  40112c:	2b00      	cmp	r3, #0
  40112e:	d151      	bne.n	4011d4 <__udivmoddi4+0xb4>
  401130:	428a      	cmp	r2, r1
  401132:	4617      	mov	r7, r2
  401134:	d96d      	bls.n	401212 <__udivmoddi4+0xf2>
  401136:	fab2 fe82 	clz	lr, r2
  40113a:	f1be 0f00 	cmp.w	lr, #0
  40113e:	d00b      	beq.n	401158 <__udivmoddi4+0x38>
  401140:	f1ce 0c20 	rsb	ip, lr, #32
  401144:	fa01 f50e 	lsl.w	r5, r1, lr
  401148:	fa20 fc0c 	lsr.w	ip, r0, ip
  40114c:	fa02 f70e 	lsl.w	r7, r2, lr
  401150:	ea4c 0c05 	orr.w	ip, ip, r5
  401154:	fa00 f40e 	lsl.w	r4, r0, lr
  401158:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40115c:	0c25      	lsrs	r5, r4, #16
  40115e:	fbbc f8fa 	udiv	r8, ip, sl
  401162:	fa1f f987 	uxth.w	r9, r7
  401166:	fb0a cc18 	mls	ip, sl, r8, ip
  40116a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40116e:	fb08 f309 	mul.w	r3, r8, r9
  401172:	42ab      	cmp	r3, r5
  401174:	d90a      	bls.n	40118c <__udivmoddi4+0x6c>
  401176:	19ed      	adds	r5, r5, r7
  401178:	f108 32ff 	add.w	r2, r8, #4294967295
  40117c:	f080 8123 	bcs.w	4013c6 <__udivmoddi4+0x2a6>
  401180:	42ab      	cmp	r3, r5
  401182:	f240 8120 	bls.w	4013c6 <__udivmoddi4+0x2a6>
  401186:	f1a8 0802 	sub.w	r8, r8, #2
  40118a:	443d      	add	r5, r7
  40118c:	1aed      	subs	r5, r5, r3
  40118e:	b2a4      	uxth	r4, r4
  401190:	fbb5 f0fa 	udiv	r0, r5, sl
  401194:	fb0a 5510 	mls	r5, sl, r0, r5
  401198:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40119c:	fb00 f909 	mul.w	r9, r0, r9
  4011a0:	45a1      	cmp	r9, r4
  4011a2:	d909      	bls.n	4011b8 <__udivmoddi4+0x98>
  4011a4:	19e4      	adds	r4, r4, r7
  4011a6:	f100 33ff 	add.w	r3, r0, #4294967295
  4011aa:	f080 810a 	bcs.w	4013c2 <__udivmoddi4+0x2a2>
  4011ae:	45a1      	cmp	r9, r4
  4011b0:	f240 8107 	bls.w	4013c2 <__udivmoddi4+0x2a2>
  4011b4:	3802      	subs	r0, #2
  4011b6:	443c      	add	r4, r7
  4011b8:	eba4 0409 	sub.w	r4, r4, r9
  4011bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4011c0:	2100      	movs	r1, #0
  4011c2:	2e00      	cmp	r6, #0
  4011c4:	d061      	beq.n	40128a <__udivmoddi4+0x16a>
  4011c6:	fa24 f40e 	lsr.w	r4, r4, lr
  4011ca:	2300      	movs	r3, #0
  4011cc:	6034      	str	r4, [r6, #0]
  4011ce:	6073      	str	r3, [r6, #4]
  4011d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4011d4:	428b      	cmp	r3, r1
  4011d6:	d907      	bls.n	4011e8 <__udivmoddi4+0xc8>
  4011d8:	2e00      	cmp	r6, #0
  4011da:	d054      	beq.n	401286 <__udivmoddi4+0x166>
  4011dc:	2100      	movs	r1, #0
  4011de:	e886 0021 	stmia.w	r6, {r0, r5}
  4011e2:	4608      	mov	r0, r1
  4011e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4011e8:	fab3 f183 	clz	r1, r3
  4011ec:	2900      	cmp	r1, #0
  4011ee:	f040 808e 	bne.w	40130e <__udivmoddi4+0x1ee>
  4011f2:	42ab      	cmp	r3, r5
  4011f4:	d302      	bcc.n	4011fc <__udivmoddi4+0xdc>
  4011f6:	4282      	cmp	r2, r0
  4011f8:	f200 80fa 	bhi.w	4013f0 <__udivmoddi4+0x2d0>
  4011fc:	1a84      	subs	r4, r0, r2
  4011fe:	eb65 0503 	sbc.w	r5, r5, r3
  401202:	2001      	movs	r0, #1
  401204:	46ac      	mov	ip, r5
  401206:	2e00      	cmp	r6, #0
  401208:	d03f      	beq.n	40128a <__udivmoddi4+0x16a>
  40120a:	e886 1010 	stmia.w	r6, {r4, ip}
  40120e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401212:	b912      	cbnz	r2, 40121a <__udivmoddi4+0xfa>
  401214:	2701      	movs	r7, #1
  401216:	fbb7 f7f2 	udiv	r7, r7, r2
  40121a:	fab7 fe87 	clz	lr, r7
  40121e:	f1be 0f00 	cmp.w	lr, #0
  401222:	d134      	bne.n	40128e <__udivmoddi4+0x16e>
  401224:	1beb      	subs	r3, r5, r7
  401226:	0c3a      	lsrs	r2, r7, #16
  401228:	fa1f fc87 	uxth.w	ip, r7
  40122c:	2101      	movs	r1, #1
  40122e:	fbb3 f8f2 	udiv	r8, r3, r2
  401232:	0c25      	lsrs	r5, r4, #16
  401234:	fb02 3318 	mls	r3, r2, r8, r3
  401238:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40123c:	fb0c f308 	mul.w	r3, ip, r8
  401240:	42ab      	cmp	r3, r5
  401242:	d907      	bls.n	401254 <__udivmoddi4+0x134>
  401244:	19ed      	adds	r5, r5, r7
  401246:	f108 30ff 	add.w	r0, r8, #4294967295
  40124a:	d202      	bcs.n	401252 <__udivmoddi4+0x132>
  40124c:	42ab      	cmp	r3, r5
  40124e:	f200 80d1 	bhi.w	4013f4 <__udivmoddi4+0x2d4>
  401252:	4680      	mov	r8, r0
  401254:	1aed      	subs	r5, r5, r3
  401256:	b2a3      	uxth	r3, r4
  401258:	fbb5 f0f2 	udiv	r0, r5, r2
  40125c:	fb02 5510 	mls	r5, r2, r0, r5
  401260:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401264:	fb0c fc00 	mul.w	ip, ip, r0
  401268:	45a4      	cmp	ip, r4
  40126a:	d907      	bls.n	40127c <__udivmoddi4+0x15c>
  40126c:	19e4      	adds	r4, r4, r7
  40126e:	f100 33ff 	add.w	r3, r0, #4294967295
  401272:	d202      	bcs.n	40127a <__udivmoddi4+0x15a>
  401274:	45a4      	cmp	ip, r4
  401276:	f200 80b8 	bhi.w	4013ea <__udivmoddi4+0x2ca>
  40127a:	4618      	mov	r0, r3
  40127c:	eba4 040c 	sub.w	r4, r4, ip
  401280:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401284:	e79d      	b.n	4011c2 <__udivmoddi4+0xa2>
  401286:	4631      	mov	r1, r6
  401288:	4630      	mov	r0, r6
  40128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40128e:	f1ce 0420 	rsb	r4, lr, #32
  401292:	fa05 f30e 	lsl.w	r3, r5, lr
  401296:	fa07 f70e 	lsl.w	r7, r7, lr
  40129a:	fa20 f804 	lsr.w	r8, r0, r4
  40129e:	0c3a      	lsrs	r2, r7, #16
  4012a0:	fa25 f404 	lsr.w	r4, r5, r4
  4012a4:	ea48 0803 	orr.w	r8, r8, r3
  4012a8:	fbb4 f1f2 	udiv	r1, r4, r2
  4012ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4012b0:	fb02 4411 	mls	r4, r2, r1, r4
  4012b4:	fa1f fc87 	uxth.w	ip, r7
  4012b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4012bc:	fb01 f30c 	mul.w	r3, r1, ip
  4012c0:	42ab      	cmp	r3, r5
  4012c2:	fa00 f40e 	lsl.w	r4, r0, lr
  4012c6:	d909      	bls.n	4012dc <__udivmoddi4+0x1bc>
  4012c8:	19ed      	adds	r5, r5, r7
  4012ca:	f101 30ff 	add.w	r0, r1, #4294967295
  4012ce:	f080 808a 	bcs.w	4013e6 <__udivmoddi4+0x2c6>
  4012d2:	42ab      	cmp	r3, r5
  4012d4:	f240 8087 	bls.w	4013e6 <__udivmoddi4+0x2c6>
  4012d8:	3902      	subs	r1, #2
  4012da:	443d      	add	r5, r7
  4012dc:	1aeb      	subs	r3, r5, r3
  4012de:	fa1f f588 	uxth.w	r5, r8
  4012e2:	fbb3 f0f2 	udiv	r0, r3, r2
  4012e6:	fb02 3310 	mls	r3, r2, r0, r3
  4012ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4012ee:	fb00 f30c 	mul.w	r3, r0, ip
  4012f2:	42ab      	cmp	r3, r5
  4012f4:	d907      	bls.n	401306 <__udivmoddi4+0x1e6>
  4012f6:	19ed      	adds	r5, r5, r7
  4012f8:	f100 38ff 	add.w	r8, r0, #4294967295
  4012fc:	d26f      	bcs.n	4013de <__udivmoddi4+0x2be>
  4012fe:	42ab      	cmp	r3, r5
  401300:	d96d      	bls.n	4013de <__udivmoddi4+0x2be>
  401302:	3802      	subs	r0, #2
  401304:	443d      	add	r5, r7
  401306:	1aeb      	subs	r3, r5, r3
  401308:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40130c:	e78f      	b.n	40122e <__udivmoddi4+0x10e>
  40130e:	f1c1 0720 	rsb	r7, r1, #32
  401312:	fa22 f807 	lsr.w	r8, r2, r7
  401316:	408b      	lsls	r3, r1
  401318:	fa05 f401 	lsl.w	r4, r5, r1
  40131c:	ea48 0303 	orr.w	r3, r8, r3
  401320:	fa20 fe07 	lsr.w	lr, r0, r7
  401324:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401328:	40fd      	lsrs	r5, r7
  40132a:	ea4e 0e04 	orr.w	lr, lr, r4
  40132e:	fbb5 f9fc 	udiv	r9, r5, ip
  401332:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401336:	fb0c 5519 	mls	r5, ip, r9, r5
  40133a:	fa1f f883 	uxth.w	r8, r3
  40133e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401342:	fb09 f408 	mul.w	r4, r9, r8
  401346:	42ac      	cmp	r4, r5
  401348:	fa02 f201 	lsl.w	r2, r2, r1
  40134c:	fa00 fa01 	lsl.w	sl, r0, r1
  401350:	d908      	bls.n	401364 <__udivmoddi4+0x244>
  401352:	18ed      	adds	r5, r5, r3
  401354:	f109 30ff 	add.w	r0, r9, #4294967295
  401358:	d243      	bcs.n	4013e2 <__udivmoddi4+0x2c2>
  40135a:	42ac      	cmp	r4, r5
  40135c:	d941      	bls.n	4013e2 <__udivmoddi4+0x2c2>
  40135e:	f1a9 0902 	sub.w	r9, r9, #2
  401362:	441d      	add	r5, r3
  401364:	1b2d      	subs	r5, r5, r4
  401366:	fa1f fe8e 	uxth.w	lr, lr
  40136a:	fbb5 f0fc 	udiv	r0, r5, ip
  40136e:	fb0c 5510 	mls	r5, ip, r0, r5
  401372:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401376:	fb00 f808 	mul.w	r8, r0, r8
  40137a:	45a0      	cmp	r8, r4
  40137c:	d907      	bls.n	40138e <__udivmoddi4+0x26e>
  40137e:	18e4      	adds	r4, r4, r3
  401380:	f100 35ff 	add.w	r5, r0, #4294967295
  401384:	d229      	bcs.n	4013da <__udivmoddi4+0x2ba>
  401386:	45a0      	cmp	r8, r4
  401388:	d927      	bls.n	4013da <__udivmoddi4+0x2ba>
  40138a:	3802      	subs	r0, #2
  40138c:	441c      	add	r4, r3
  40138e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401392:	eba4 0408 	sub.w	r4, r4, r8
  401396:	fba0 8902 	umull	r8, r9, r0, r2
  40139a:	454c      	cmp	r4, r9
  40139c:	46c6      	mov	lr, r8
  40139e:	464d      	mov	r5, r9
  4013a0:	d315      	bcc.n	4013ce <__udivmoddi4+0x2ae>
  4013a2:	d012      	beq.n	4013ca <__udivmoddi4+0x2aa>
  4013a4:	b156      	cbz	r6, 4013bc <__udivmoddi4+0x29c>
  4013a6:	ebba 030e 	subs.w	r3, sl, lr
  4013aa:	eb64 0405 	sbc.w	r4, r4, r5
  4013ae:	fa04 f707 	lsl.w	r7, r4, r7
  4013b2:	40cb      	lsrs	r3, r1
  4013b4:	431f      	orrs	r7, r3
  4013b6:	40cc      	lsrs	r4, r1
  4013b8:	6037      	str	r7, [r6, #0]
  4013ba:	6074      	str	r4, [r6, #4]
  4013bc:	2100      	movs	r1, #0
  4013be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4013c2:	4618      	mov	r0, r3
  4013c4:	e6f8      	b.n	4011b8 <__udivmoddi4+0x98>
  4013c6:	4690      	mov	r8, r2
  4013c8:	e6e0      	b.n	40118c <__udivmoddi4+0x6c>
  4013ca:	45c2      	cmp	sl, r8
  4013cc:	d2ea      	bcs.n	4013a4 <__udivmoddi4+0x284>
  4013ce:	ebb8 0e02 	subs.w	lr, r8, r2
  4013d2:	eb69 0503 	sbc.w	r5, r9, r3
  4013d6:	3801      	subs	r0, #1
  4013d8:	e7e4      	b.n	4013a4 <__udivmoddi4+0x284>
  4013da:	4628      	mov	r0, r5
  4013dc:	e7d7      	b.n	40138e <__udivmoddi4+0x26e>
  4013de:	4640      	mov	r0, r8
  4013e0:	e791      	b.n	401306 <__udivmoddi4+0x1e6>
  4013e2:	4681      	mov	r9, r0
  4013e4:	e7be      	b.n	401364 <__udivmoddi4+0x244>
  4013e6:	4601      	mov	r1, r0
  4013e8:	e778      	b.n	4012dc <__udivmoddi4+0x1bc>
  4013ea:	3802      	subs	r0, #2
  4013ec:	443c      	add	r4, r7
  4013ee:	e745      	b.n	40127c <__udivmoddi4+0x15c>
  4013f0:	4608      	mov	r0, r1
  4013f2:	e708      	b.n	401206 <__udivmoddi4+0xe6>
  4013f4:	f1a8 0802 	sub.w	r8, r8, #2
  4013f8:	443d      	add	r5, r7
  4013fa:	e72b      	b.n	401254 <__udivmoddi4+0x134>

004013fc <__aeabi_idiv0>:
  4013fc:	4770      	bx	lr
  4013fe:	bf00      	nop

00401400 <__aeabi_d2uiz>:
  401400:	004a      	lsls	r2, r1, #1
  401402:	d211      	bcs.n	401428 <__aeabi_d2uiz+0x28>
  401404:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  401408:	d211      	bcs.n	40142e <__aeabi_d2uiz+0x2e>
  40140a:	d50d      	bpl.n	401428 <__aeabi_d2uiz+0x28>
  40140c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  401410:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  401414:	d40e      	bmi.n	401434 <__aeabi_d2uiz+0x34>
  401416:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40141a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40141e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  401422:	fa23 f002 	lsr.w	r0, r3, r2
  401426:	4770      	bx	lr
  401428:	f04f 0000 	mov.w	r0, #0
  40142c:	4770      	bx	lr
  40142e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  401432:	d102      	bne.n	40143a <__aeabi_d2uiz+0x3a>
  401434:	f04f 30ff 	mov.w	r0, #4294967295
  401438:	4770      	bx	lr
  40143a:	f04f 0000 	mov.w	r0, #0
  40143e:	4770      	bx	lr

00401440 <__libc_init_array>:
  401440:	b570      	push	{r4, r5, r6, lr}
  401442:	4e0f      	ldr	r6, [pc, #60]	; (401480 <__libc_init_array+0x40>)
  401444:	4d0f      	ldr	r5, [pc, #60]	; (401484 <__libc_init_array+0x44>)
  401446:	1b76      	subs	r6, r6, r5
  401448:	10b6      	asrs	r6, r6, #2
  40144a:	bf18      	it	ne
  40144c:	2400      	movne	r4, #0
  40144e:	d005      	beq.n	40145c <__libc_init_array+0x1c>
  401450:	3401      	adds	r4, #1
  401452:	f855 3b04 	ldr.w	r3, [r5], #4
  401456:	4798      	blx	r3
  401458:	42a6      	cmp	r6, r4
  40145a:	d1f9      	bne.n	401450 <__libc_init_array+0x10>
  40145c:	4e0a      	ldr	r6, [pc, #40]	; (401488 <__libc_init_array+0x48>)
  40145e:	4d0b      	ldr	r5, [pc, #44]	; (40148c <__libc_init_array+0x4c>)
  401460:	1b76      	subs	r6, r6, r5
  401462:	f000 f8a7 	bl	4015b4 <_init>
  401466:	10b6      	asrs	r6, r6, #2
  401468:	bf18      	it	ne
  40146a:	2400      	movne	r4, #0
  40146c:	d006      	beq.n	40147c <__libc_init_array+0x3c>
  40146e:	3401      	adds	r4, #1
  401470:	f855 3b04 	ldr.w	r3, [r5], #4
  401474:	4798      	blx	r3
  401476:	42a6      	cmp	r6, r4
  401478:	d1f9      	bne.n	40146e <__libc_init_array+0x2e>
  40147a:	bd70      	pop	{r4, r5, r6, pc}
  40147c:	bd70      	pop	{r4, r5, r6, pc}
  40147e:	bf00      	nop
  401480:	004015c0 	.word	0x004015c0
  401484:	004015c0 	.word	0x004015c0
  401488:	004015c8 	.word	0x004015c8
  40148c:	004015c0 	.word	0x004015c0

00401490 <register_fini>:
  401490:	4b02      	ldr	r3, [pc, #8]	; (40149c <register_fini+0xc>)
  401492:	b113      	cbz	r3, 40149a <register_fini+0xa>
  401494:	4802      	ldr	r0, [pc, #8]	; (4014a0 <register_fini+0x10>)
  401496:	f000 b805 	b.w	4014a4 <atexit>
  40149a:	4770      	bx	lr
  40149c:	00000000 	.word	0x00000000
  4014a0:	004014b1 	.word	0x004014b1

004014a4 <atexit>:
  4014a4:	2300      	movs	r3, #0
  4014a6:	4601      	mov	r1, r0
  4014a8:	461a      	mov	r2, r3
  4014aa:	4618      	mov	r0, r3
  4014ac:	f000 b81e 	b.w	4014ec <__register_exitproc>

004014b0 <__libc_fini_array>:
  4014b0:	b538      	push	{r3, r4, r5, lr}
  4014b2:	4c0a      	ldr	r4, [pc, #40]	; (4014dc <__libc_fini_array+0x2c>)
  4014b4:	4d0a      	ldr	r5, [pc, #40]	; (4014e0 <__libc_fini_array+0x30>)
  4014b6:	1b64      	subs	r4, r4, r5
  4014b8:	10a4      	asrs	r4, r4, #2
  4014ba:	d00a      	beq.n	4014d2 <__libc_fini_array+0x22>
  4014bc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4014c0:	3b01      	subs	r3, #1
  4014c2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4014c6:	3c01      	subs	r4, #1
  4014c8:	f855 3904 	ldr.w	r3, [r5], #-4
  4014cc:	4798      	blx	r3
  4014ce:	2c00      	cmp	r4, #0
  4014d0:	d1f9      	bne.n	4014c6 <__libc_fini_array+0x16>
  4014d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4014d6:	f000 b877 	b.w	4015c8 <_fini>
  4014da:	bf00      	nop
  4014dc:	004015d8 	.word	0x004015d8
  4014e0:	004015d4 	.word	0x004015d4

004014e4 <__retarget_lock_acquire_recursive>:
  4014e4:	4770      	bx	lr
  4014e6:	bf00      	nop

004014e8 <__retarget_lock_release_recursive>:
  4014e8:	4770      	bx	lr
  4014ea:	bf00      	nop

004014ec <__register_exitproc>:
  4014ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4014f0:	4d2c      	ldr	r5, [pc, #176]	; (4015a4 <__register_exitproc+0xb8>)
  4014f2:	4606      	mov	r6, r0
  4014f4:	6828      	ldr	r0, [r5, #0]
  4014f6:	4698      	mov	r8, r3
  4014f8:	460f      	mov	r7, r1
  4014fa:	4691      	mov	r9, r2
  4014fc:	f7ff fff2 	bl	4014e4 <__retarget_lock_acquire_recursive>
  401500:	4b29      	ldr	r3, [pc, #164]	; (4015a8 <__register_exitproc+0xbc>)
  401502:	681c      	ldr	r4, [r3, #0]
  401504:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401508:	2b00      	cmp	r3, #0
  40150a:	d03e      	beq.n	40158a <__register_exitproc+0x9e>
  40150c:	685a      	ldr	r2, [r3, #4]
  40150e:	2a1f      	cmp	r2, #31
  401510:	dc1c      	bgt.n	40154c <__register_exitproc+0x60>
  401512:	f102 0e01 	add.w	lr, r2, #1
  401516:	b176      	cbz	r6, 401536 <__register_exitproc+0x4a>
  401518:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40151c:	2401      	movs	r4, #1
  40151e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401522:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401526:	4094      	lsls	r4, r2
  401528:	4320      	orrs	r0, r4
  40152a:	2e02      	cmp	r6, #2
  40152c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401530:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401534:	d023      	beq.n	40157e <__register_exitproc+0x92>
  401536:	3202      	adds	r2, #2
  401538:	f8c3 e004 	str.w	lr, [r3, #4]
  40153c:	6828      	ldr	r0, [r5, #0]
  40153e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401542:	f7ff ffd1 	bl	4014e8 <__retarget_lock_release_recursive>
  401546:	2000      	movs	r0, #0
  401548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40154c:	4b17      	ldr	r3, [pc, #92]	; (4015ac <__register_exitproc+0xc0>)
  40154e:	b30b      	cbz	r3, 401594 <__register_exitproc+0xa8>
  401550:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401554:	f3af 8000 	nop.w
  401558:	4603      	mov	r3, r0
  40155a:	b1d8      	cbz	r0, 401594 <__register_exitproc+0xa8>
  40155c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401560:	6002      	str	r2, [r0, #0]
  401562:	2100      	movs	r1, #0
  401564:	6041      	str	r1, [r0, #4]
  401566:	460a      	mov	r2, r1
  401568:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40156c:	f04f 0e01 	mov.w	lr, #1
  401570:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401574:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401578:	2e00      	cmp	r6, #0
  40157a:	d0dc      	beq.n	401536 <__register_exitproc+0x4a>
  40157c:	e7cc      	b.n	401518 <__register_exitproc+0x2c>
  40157e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401582:	430c      	orrs	r4, r1
  401584:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401588:	e7d5      	b.n	401536 <__register_exitproc+0x4a>
  40158a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40158e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401592:	e7bb      	b.n	40150c <__register_exitproc+0x20>
  401594:	6828      	ldr	r0, [r5, #0]
  401596:	f7ff ffa7 	bl	4014e8 <__retarget_lock_release_recursive>
  40159a:	f04f 30ff 	mov.w	r0, #4294967295
  40159e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4015a2:	bf00      	nop
  4015a4:	20400488 	.word	0x20400488
  4015a8:	004015b0 	.word	0x004015b0
  4015ac:	00000000 	.word	0x00000000

004015b0 <_global_impure_ptr>:
  4015b0:	20400060                                `.@ 

004015b4 <_init>:
  4015b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015b6:	bf00      	nop
  4015b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4015ba:	bc08      	pop	{r3}
  4015bc:	469e      	mov	lr, r3
  4015be:	4770      	bx	lr

004015c0 <__init_array_start>:
  4015c0:	00401491 	.word	0x00401491

004015c4 <__frame_dummy_init_array_entry>:
  4015c4:	00400165                                e.@.

004015c8 <_fini>:
  4015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015ca:	bf00      	nop
  4015cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4015ce:	bc08      	pop	{r3}
  4015d0:	469e      	mov	lr, r3
  4015d2:	4770      	bx	lr

004015d4 <__fini_array_start>:
  4015d4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <imperial_march_notes>:
20400010:	01b8 0000 01b8 0000 01b8 0000 015d 0000     ............]...
20400020:	020b 0000 01b8 0000 015d 0000 020b 0000     ........].......
20400030:	01b8 0000 0000 0000 0293 0000 0293 0000     ................
20400040:	0293 0000 02ba 0000 020b 0000 019f 0000     ................
20400050:	015d 0000 020b 0000 01b8 0000 0000 0000     ]...............

20400060 <impure_data>:
20400060:	0000 0000 034c 2040 03b4 2040 041c 2040     ....L.@ ..@ ..@ 
	...
20400108:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400118:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400488 <__atexit_recursive_mutex>:
20400488:	0518 2040                                   ..@ 
